<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MemberSuite.SDK</name>
    </assembly>
    <members>
        <member name="T:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator">
            <summary>
                Class ConciergeAPIProxyGenerator
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._channelFactory">
            <summary>
                The _channel factory
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.threadLock">
            <summary>
                The thread lock
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._mock">
            <summary>
                The _mock
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._sessionID">
            <summary>
                The _session ID
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._associationId">
            <summary>
                The _association id
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.RegisterMock(MemberSuite.SDK.Concierge.IConciergeAPIService)">
            <summary>
                Registers the mock.
            </summary>
            <param name="mock">The mock.</param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.RegisterSessionIDProvider(MemberSuite.SDK.Concierge.IConciergeAPISessionIdProvider)">
            <summary>
                Registers the session ID provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.RegisterAssociationIdProvider(MemberSuite.SDK.Concierge.IConciergeAPIAssociationIdProvider)">
            <summary>
                Registers the association id provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.RegisterClientIpProvider(MemberSuite.SDK.Concierge.IConciergeClientIpAddressProvider)">
            <summary>
             Registers the Client IP Provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.RegisterBrowserIdProvider(MemberSuite.SDK.Concierge.IConciergeAPIBrowserIdProvider)">
            <summary>
                Registers the browser id provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.GenerateProxy">
            <summary>
                Generates the proxy.
            </summary>
            <returns>IConciergeAPIService.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.GenerateProxy(System.String)">
            <summary>
                Generates the proxy.
            </summary>
            <param name="instanceName">Name of the Concierge Instance to use.</param>
            <returns>IConciergeAPIService.</returns>
            <exception cref="T:System.ArgumentNullException">instanceName</exception>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.GetChannelFactory(System.String)">
            <summary>
                Gets the channel factory.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>ChannelFactory{IConciergeAPIService}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._buildChannelFactory(System.String)">
            <summary>
                _builds the channel factory.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>ChannelFactory{IConciergeAPIService}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.generateBindingFor(System.String)">
            <summary>
                Generates the binding for.
            </summary>
            <param name="conciergeUri">The concierge URI.</param>
            <returns>Binding.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.generateTcpBinding">
            <summary>
                Generates the TCP binding.
            </summary>
            <returns>Binding.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.generateBasicHttpBinding">
            <summary>
                Generates the basic HTTP binding.
            </summary>
            <returns>Binding.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.CreateRequestHeader(System.ServiceModel.Channels.Message)">
            <summary>
                Creates the request header.
            </summary>
            <param name="request">The request.</param>
            <returns>MessageHeader.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.SetSecretAccessKey(System.String)">
            <summary>
                Sets the secret access key.
            </summary>
            <param name="secretAccessKey">The secret access key.</param>
            <exception cref="T:System.ArgumentNullException">secretAccessKey</exception>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.SetAccessKeyId(System.String)">
            <summary>
                Sets the access key id.
            </summary>
            <param name="accessKeyId">The access key id.</param>
            <exception cref="T:System.ArgumentNullException">accessKeyId</exception>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.HasAccessKeyId">
            <summary>
                Determines whether [has access key id].
            </summary>
            <returns><c>true</c> if [has access key id]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.HasSecretAccessKey">
            <summary>
                Determines whether [has secret access key].
            </summary>
            <returns><c>true</c> if [has secret access key]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.ClearAccessKeyId">
            <summary>
                Clears the access key id.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.ClearSecretAccessKey">
            <summary>
                Clears the secret access key.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._sessionIDProvider">
            <summary>
                Gets or sets the _session ID provider.
            </summary>
            <value>The _session ID provider.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._associationIdProvider">
            <summary>
                Gets or sets the _association id provider.
            </summary>
            <value>The _association id provider.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._browserIdProvider">
            <summary>
                Gets or sets the _browser id provider.
            </summary>
            <value>The _browser id provider.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator._accessKeyId">
            <summary>
                Gets or sets the _access key id.
            </summary>
            <value>The _access key id.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.ConfigurationName">
            <summary>
                Gets or sets the name of the configuration section to pull the
                API information from - otherwise, this is generated automatically.
            </summary>
            <value>The name of the configuration.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.SessionID">
            <summary>
                Gets or sets the session ID.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.AssociationId">
            <summary>
                Gets or sets the session ID.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.BrowserId">
            <summary>
                Gets or sets the browser ID.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.DefaultInstance">
            <summary>
                Gets or sets the default instance.
            </summary>
            <value>The default instance.</value>
        </member>
        <member name="P:MemberSuite.SDK.Concierge.ConciergeAPIProxyGenerator.SecretAccessKey">
            <summary>
                Gets or sets the secret access key.
            </summary>
            <value>The secret access key.</value>
        </member>
        <member name="T:MemberSuite.SDK.Concierge.IConciergeAPISessionIdProvider">
            <summary>
                This is a generalized interface used when outside classes are responsible for
                resolving the current SessionID. For instance - a web application may store
                session ID in Session state - they would use this interface to respond to the current session.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPISessionIdProvider.TryGetSessionId(System.String@)">
            <summary>
                Tries the get session id.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPISessionIdProvider.SetSessionId(System.String)">
            <summary>
                Sets the session id.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:MemberSuite.SDK.Concierge.IConciergeAPIAssociationIdProvider">
            <summary>
                Interface IConciergeAPIAssociationIdProvider
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIAssociationIdProvider.TryGetAssociationId(System.String@)">
            <summary>
                Tries the get association id.
            </summary>
            <param name="associationId">The association id.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIAssociationIdProvider.SetAssociationId(System.String)">
            <summary>
                Sets the association id.
            </summary>
            <param name="associationId">The association id.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:MemberSuite.SDK.Concierge.IConciergeAPIBrowserIdProvider">
            <summary>
                Interface IConciergeAPIBrowserIdProvider
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIBrowserIdProvider.TryGetBrowserId(System.String@)">
            <summary>
                Tries the get browser id.
            </summary>
            <param name="browserId">The browser id.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:MemberSuite.SDK.Concierge.IConciergeAPIService">
            <summary>
                Interface IConciergeAPIService
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.InitiateBillingRun(System.String)">
            <summary>
            InitiateBillingRun
            </summary>
            <type>Billing</type>
            <param name="billingRunID"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetCompetitionEntryInformation(System.String,System.String)" -->
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ConvertLead(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Converts a lead into an organization/contact
            </summary>
            <type>Prospects</type>
            <param name="leadID">The lead ID.</param>
            <param name="newOwnerID">The new owner ID.</param>
            <param name="sendEmailToNewOwner">if set to <c>true</c> [send email to new owner].</param>
            <param name="entityNameOrID">The entity name or ID.</param>
            <param name="createIndividualRecord">if set to <c>true</c> [create individual record].</param>
            <param name="relationshipTypeID">The relationship type ID.</param>
            <param name="opportunityNameOrID">The opportunity name or ID.</param>
            <param name="msoFollowUpActivity">The follow up activity.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.FulfillSubscriptions(MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest)">
            <summary>
                Fulfills the subscriptions in the system based on the manifest.
            </summary>
            <type>Subscriptions</type>
            <param name="jobManifest">The job manifest.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAppropriateRateCard(System.String,System.String)">
            <summary>
                Gets the appropriate rate card.
            </summary>
            <param name="issueId">The issue id.</param>
            <param name="advertiserId">The advertiser id.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAssociationFromObjectIdentifier(System.String)">
            <summary>
                Gets the association that a specific object belongs to
            </summary>
            <param name="objectID">The object ID to examine</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.AutoAssignChaptersToMemberships(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            AutoAssignChaptersToMemberships
            </summary>
            <param name="jobName"></param>
            <param name="membershipIDs"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CancelMembership(System.String,MemberSuite.SDK.Types.MembershipCancellationOptions)">
            <summary>
            CancelMembership
            </summary>
            <param name="membershipID"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ShowWorkflowArgs(System.String)">
            <summary>
            ShowWorkflowArgs
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecordForcedLogout(System.String,System.String)">
            <summary>
            RecordForcedLogout
            </summary>
            <param name="userID"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPriorityConfiguration(System.String)">
            <summary>
            GetPriorityConfiguration
            </summary>
            <param name="entityID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPaymentProcessorSettings(System.String,System.String)">
            <summary>
            Get Payment Processor Settings
            </summary>
            <param name="businessUnitID"></param>
            <param name="entityID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPaymentProcessorSettingsForMultipleAccounts(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get Payment Processor Settings
            </summary>
            <param name="businessUnitIDs"></param>
            <param name="entityID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ConvertSavedPaymentMethodsToPreferredProvider">
            <summary>
            ConvertSavedPaymentMethodsToPreferredProvider
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrievePortalInformationByUrl(System.String)">
            <summary>
                Uses the URL of a portal to locate portal information.
            </summary>
            <param name="hostName">
                The url to review. Be sure to exclude protocol headers (i.e., use customername.customer,com
                without the http:// or https://)
            </param>
            <returns>The portal information for associated URL.</returns>
            <type>Security</type>
            <remarks>
                This method is useful in a situation where you don't necessarily know the association that is
                usingthe portal - for instance, if you're writing generic code intended to be used by more than one instance
                of a MemberSuite. MemberSuite assigns each customer a unique URL for thier portal; furthermore, customers have
                the ability to indicate a "custom" portal URL. Based on this information, you can read the incoming HTTP request
                information to determine the URL being referenced, and then pass the URL to this funciton. If you don't have the
                URL, but have the portal ID, then use <service name="RetrievePortalInformationByID" />
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrievePortalInformationByID">
            <summary>
                Retrieves information about a customer's portal settings by the ID ofthe association
            </summary>
            <returns>The portal information for the logging in portal user.</returns>
            <type>Security</type>
            <remarks>
                There is no parameter, because the ID of the currently logged in association is used. Based on the currently logged
                in association, a packet ofinformation useful for configuring the portal is returned.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetRecordPermission(System.String)">
            <summary>
                Gets the access level of a specific record forthe current logged in user
            </summary>
            <param name="recordID">The ID of the record to examine</param>
            <returns>
                An <enum name="SecurityLockAccessLevel" /> value representing the access that the current logged
                in user has to the specified record.
            </returns>
            <remarks>
                When you're using record level security, this method allows you to determine whether the logged in
                user has access to a record <i>without</i> having to load the record.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Login(System.String,System.String,System.String)">
            <summary>
                Logs in a user with the username and password.
            </summary>
            <param name="userName">Username/login.</param>
            <param name="password">The password for the user.</param>
            <param name="loginDestination">
                The ID of the association that the user should be logged into. If no ID is specified, then the logic is as follows:
                <ul type="Numbered">
                    <li>If the <domainobject name="User.LastAssociation" /> is set, then that association is used for login</li>
                    <li>
                        If the user is a <domainobject name="CustomerUser" />, then the first association for that customer will be
                        used as the login destination
                    </li>
                    <li>
                        If none of the above are true, then no association set set for the logged in user, and any functions that
                        require a logged in association
                        will not work until an association is chosed.
                    </li>
                </ul>
            </param>
            <returns></returns>
            <type>Security</type>
            <remarks>
                This method is intended to be run for console users - if you are attempting to login a
                <domainboject name="PortalUser" />,
                then refer to <service name="LoginToPortal" />.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ResetPassword(System.String,System.String)">
            <summary>
                Resets the password for a specified user.
            </summary>
            <param name="userID">The ID of the user whose password you need to reset</param>
            <param name="newPassword">The new password</param>
            <returns>Returns a <object name="ConciergeResult" /> indicating whether or not the operation was successful.</returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendWelcomePortalUserEmail(System.String,System.String)">
            <summary>
                Sends a welcome email to a portal user
            </summary>
            <param name="portalUserId">The ID of the portal user</param>
            <param name="emailAddress">The email to send the welcome to.</param>
            <returns></returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendForgottenPortalPasswordEmail(System.String,System.String)">
            <summary>
                Sends a forgotten password email to a portal user
            </summary>
            <param name="portalUserName">The ID of the portal user</param>
            <param name="nextUrl">The URL that the user should be sent to <i>after</i> they reset their password.</param>
            <returns></returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetOrCreatePortalUserForEntity(System.String)">
            <summary>
                Retrieves the portal user associated with an <domainobject name="Entity" />, or creates it if none
                exists.
            </summary>
            <param name="entityId">The entity being examined</param>
            <returns>The portal</returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SearchAndGetOrCreatePortalUser(System.String)">
            <summary>
                Searches the and get or create portal user.
            </summary>
            <param name="loginIDOrEmail">The login ID or email.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.LoginWithHash(System.String,System.String)">
            <summary>
                Allows for a login with a saved hash, allowing for "auto-login" and
                "remember-me" operations
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="hash">The hash to use.</param>
            <returns>
                Returns the LoginResult corresponding to the logged in user, or a ConciergeResult with Success set to false
                if the login was unsuccessful.
            </returns>
            <type>Security</type>
            <remarks>
                When you run the <service name="Login" /> method, you are given a hash via
                <object name="LoginResult.AutoLoginHash" />
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.LoginPortalUserWithHash(System.String,System.String)">
            <summary>
                Allows you to log a portal user into MemberSuite using a saved hash
            </summary>
            <param name="portalUserName">The portal user's login ID/name</param>
            <param name="hash">The hash</param>
            <returns>Success=true if the login is successful.</returns>
            <type>Security</type>
            <remarks>
                When ever you login, an <object name="LoginResult.AutoLoginHash" /> is returned. You
                can store this hash awway and allow the user to login automaticlaly in the future.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.LoginToPortal(System.String,System.String)">
            <summary>
                Logs a portal user into an association
            </summary>
            <param name="portalUserName">The user name of the portal user</param>
            <param name="portalPassword">The password of the portal user</param>
            <returns></returns>
            <type>Security</type>
            <remarks>This method does <i>not</i> require a X.509 certificate because the password of the user is provided</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateTemporaryAccessKey(System.String,System.String,System.Byte[])">
            <summary>
                Creates the temporary access key.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="secretAccessKey">The secret access key.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateTemporaryAccessKeyWithHash(System.String,System.String,System.Byte[])">
            <summary>
                Creates the temporary access key with hash.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="hash">The hash.</param>
            <param name="secretAccessKey">The secret access key.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreatePortalSecurityToken(System.String,System.String,System.Byte[])">
            <summary>
                Creates the portal security token.
            </summary>
            <param name="portalUserName">Name of the portal user.</param>
            <param name="signingCertificateId">The signing certificate id.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateConsoleSecurityToken(System.String,System.String,System.Byte[])">
            <summary>
                Creates the console security token.
            </summary>
            <param name="userId">The user id.</param>
            <param name="signingCertificateId">The signing certificate id.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.LoginWithToken(System.Byte[],System.String,System.Byte[])">
            <summary>
                Logins the with token.
            </summary>
            <param name="securityToken">The security token.</param>
            <param name="signingCertificateId">The signing certificate id.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ChangePassword(System.String,System.String)">
            <summary>
                Changes the password of the current logged in user
            </summary>
            <param name="oldPassword">The old password</param>
            <param name="newPassword">The new password to change</param>
            <returns>Returns Success=false if the old password does not authenticate; otherwise returns Success=true.</returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SwitchAssociation">
            <summary>
                Switches from one association to another
            </summary>
            <returns>Success=true if the switch was successful; otherwise Success=false;</returns>
            <type>Security</type>
            <remarks>
                Even though the association Id is included in the header of each API call, you <i>must</i> call this
                method if you are changing from one association to another.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Logout">
            <summary>
                Logs the currently logged in user out of MemberSuite
            </summary>
            <returns></returns>
            <type>Security</type>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecordRecordAccess(System.String,MemberSuite.SDK.Types.CommandShortcut)">
            <summary>
                Records that a particular record was accessed
            </summary>
            <param name="recordID">The record that has been access</param>
            <param name="cmd">The command used to access it</param>
            <returns></returns>
            <remarks>
                This method will automatically update the Recent Items list of the currently logged in user
                with the specified record. If the record is locked, then this method will automatically generate an audit log
                indicating
                that the record was viewed.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecordError(System.String)">
            <summary>
                Records an error that has occurred in your system
            </summary>
            <param name="description">A description of the error</param>
            <returns></returns>
            <remarks>
                This method will write an <domainobject name="AuditLog" /> out to the currently logged in association's instance of
                type <enum type="AuditLogType.Error" />.
                Use this method when you only need to log a generic error/description. If you need finer control over the audit log
                that
                is written, then you should use <service name="RecordErrorAuditLog" />.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecordErrorAuditLog(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Records an error that has occurred in your system with a full audit log
            </summary>
            <param name="msoErrorAuditLog">The audit log to save</param>
            <returns></returns>
            <type>Database</type>
            <remarks>
                This method differs from <service name="RecordError" /> in that you have the opportunity to persist a full
                <objcet name="AuditLog" />. Because audit logs are not persistable by default, you must use this method to write
                one
                to the database. Also - the audit log you specify here must be of type <enum name="AuditLogType.Error" />.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecordJobProgress(System.String,System.String,System.Nullable{MemberSuite.SDK.Types.JobStatus})">
            <summary>
                Allows you to record the progress of a <object name="CustomJob" />.
            </summary>
            <param name="jobID">The ID of the job you would like to update</param>
            <param name="additionalLogText">The additional log text to append to thelog</param>
            <param name="newStatus">The new status to assign to the job, if applicable</param>
            <returns></returns>
            <type>Database</type>
            <remarks>
                <p>
                    Because the <domainobject name="CustomJob" />is persistable, you are free to create and save them.  However,
                    you may find instances in which a job log is extremely long - say, when processing 10,000 records - and loading
                    the
                    <domainobject name="CustomJob" /> record, appending a line, and saving it throug the UI will prove to be
                    inefficient. This
                    method circumvents this process by using an optimized database write that eliminates the need to load the job
                    from the system.
                </p>
                <p>
                    Additionally, you can change the status at the same time you are recording progress. The keeps you from having
                    to load
                    the entire job, plus the log, from the database simple to flip the status to
                    <enum name="JobStatus.Completed" />. This is optional
                    and usually done only when the job is complete, or when the job encounters an error.
                </p>
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllUsersThanCanAccessCurrentAssociation">
            <summary>
                Returns a list of all users that can access the logged in association
            </summary>
            <returns>A list of users that can access the logged in association</returns>
            <type>Security</type>
            <remarks>
                This method will determine all <domainobject name="CustomerUser" /> records that have access to the
                currently logging in association. An example of where this is useful is providing a list of users that can be
                assigned to a <domainobject name="Task" /> or <domainobject name="Activity" />.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.WhoAmI">
            <summary>
                Returns a <oject name="LoginResult" /> for the currently logged in user and association.
            </summary>
            <returns></returns>
            <type>Security</type>
            <remarks>
                This is usually the first command you run to establish a session and learn about
                the currently logged in user and association. See the code samples for usage techniques.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAccessibleEntitiesForEntity(System.String)">
            <summary>
                Returns a list of all entities that an entity can access
            </summary>
            <param name="entityId">The entity to query</param>
            <returns></returns>
            <type>Security</type>
            <remarks>
                An <domainobject name="Entity" /> in MemberSuite can often access other entities, usually via a
                <domainobject name="Relationship" /> where the <domainobject name="RelationshipType.EnablePortalManagement" /> is
                set to true. Call this method if you need to determine what other entities an entity can login as.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAssociationConfiguration">
            <summary>
                Gets the association configuration information
            </summary>
            <type>Metadata</type>
            <returns></returns>
            <remarks>
                All association-level configuration is stored in a single <domainobject name="AssociationConfigurationContainer" />
                . This method
                allows you to easily retrive this information for the logged in asociation.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.AddFavorite(MemberSuite.SDK.Types.CommandShortcut)">
            <summary>
                Adds a favorite command to a user preferences account.
            </summary>
            <type>Metadata</type>
            <param name="cmd">The command to add.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetUserPreferences">
            <summary>
                Gets user preferences.
            </summary>
            <type>Metadata</type>
            <returns></returns>
            <remarks>
                This method will retrieve a <domainobject name="UserPreferencesContainer" /> for the current logged in user.
                Note that a user may only have one such set of preferences.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateIdentifer(System.String)">
            <summary>
                Generates an ID for a specific type of object
            </summary>
            <param name="typeOfObjec"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetCommandDefinition(System.String)">
            <summary>
                Gets the definition for a command.
            </summary>
            <type>Metadata</type>
            <param name="commandName">Name of the command.</param>
            <returns></returns>
            <remarks>For a user interface command, this method returns the command definition XML.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllCommands">
            <summary>
                Gets all commands with a partial definition
            </summary>
            <type>Metadata</type>
            <returns></returns>
            <remarks>
                The service is important because it lets the UI make decisions about
                whether a command is a popup or not, or what the name is, without
                having to actually call the API.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetConsoleMetadata">
            <summary>
                Gets the console metadata for the currently logged in user.
            </summary>
            <type>Metadata</type>
            <returns></returns>
            <remarks>This is used internally by MemberSuite to get tabs, keychain security, etc.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeObject(System.String)">
            <summary>
                Describes an object, including it's parent types, fields, and field definitions
            </summary>
            <type>Metadata</type>
            <param name="objectType">The type of object to describe. Custom objects are allowed as a parameter.</param>
            <returns></returns>
            <remarks>
                This method allows you to learn how an object is structure for the logged in association. Since
                an association can create custom fields, or modify built-in fields, it's important to get the
                <object name="ClassMetadata" /> for an object before constructing the object. One of the most important
                reasons is that the <object name="ClassMetadata" /> specifies default values for objects that are created.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeObjectBuiltInFields(System.String)">
            <summary>
                Describes the object built in fields.
            </summary>
            <type>Metadata</type>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateNoSqlTable(System.String,System.String)">
            <summary>
            CreateNoSqlTable
            </summary>
            <param name="tableName"></param>
            <param name="tableDefinitionKey"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultDataEntryPageLayout(System.String)">
            <summary>
                Gets the default data entry page layout for the specified object.
            </summary>
            <type>Metadata</type>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultPortalPageLayout(System.String)">
            <summary>
                Gets the default portal page layout for the specified object.
            </summary>
            <type>Metadata</type>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultData360PageLayout(System.String)">
            <summary>
                Gets the default 360 page layout for the specified object.
            </summary>
            <type>Metadata</type>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateClassMetadata(System.String,MemberSuite.SDK.Types.ClassMetadataOverride)">
            <summary>
                Updates the class metadata for the specified object type/
            </summary>
            <type>Metadata</type>
            <param name="objectType">Type of the object.</param>
            <param name="metadataToSave">The metadata to save.</param>
            <returns></returns>
            <remarks>Use this method to update built-in fields for an object.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ListAllObjects(System.Boolean,System.String)">
            <summary>
                Lists all  objects in the system, including custom objects
            </summary>
            <type>Metadata</type>
            <param name="includeAbstract">if set to <c>true</c> abstract objects are included in the list.</param>
            <param name="baseObjectType" optional="true">Type of the base object to use. Leave this as null for all objects.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DetermineObjectType(System.String)">
            <summary>
                Determines the type of the object based on the object ID.
            </summary>
            <type>Metadata</type>
            <param name="objectID">The object ID to interrogate</param>
            <returns></returns>
            <remarks>
                MemberSuite can easily tell what type an object is, and what association it belongs to, based on it's ID. Call
                this method if you have an object ID, and need to know what type it is. This method will also properly return
                custom objects by name.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateCustomField(MemberSuite.SDK.Types.MemberSuiteObject,MemberSuite.SDK.Manifests.CustomField.CustomFieldCreationPacket)">
            <summary>
            Updates the custom field definition, optionally updating page layouts at the same time.
            </summary>
            <param name="msoCustomField">The mso custom field.</param>
            <param name="packet">The custom field creation packet to use for the update.</param>
            <returns>ConciergeResult&lt;MemberSuiteObject&gt;.</returns>
            <type>Metadata</type>
            <remarks>While you can save custom fields directly via the <domainobject name="CustomField" /> class, often
            you want to place the fields directly on page layouts at the same time you save them. This method allows you
            to do this.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateTabs(System.Collections.Generic.List{MemberSuite.SDK.Manifests.Console.Tab})">
            <summary>
                Updates the tabs for the currently logged in user.
            </summary>
            <type>Metadata</type>
            <param name="newTabs">The new tabs.</param>
            <returns></returns>
            <remarks>
                This method will clear out any existing tabs and replace them with the tabs specified. Pass in an empty list
                to clear out the current user's custom tabs.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdatePreferences(System.Collections.Generic.List{MemberSuite.SDK.Types.NameValueStringPair})">
            <summary>
                Updates the preferences for the current user.
            </summary>
            <type>Metadata</type>
            <param name="preferences">The preferences to update.</param>
            <returns></returns>
            <remarks>
                This method will only act on preferences listed in the parameters; submitting an empty list
                will do nothing. User preferences are custom settings defined by the UI; you should feel free to use
                this method to store application-specific preferences for users, provided you use a suitable namespace
                to avoid collision of preference keys. In other words, you should have a preference named
                <b>acme.it.customwork.defaultPage</b>,
                instead of just <b>defaultPage.</b>
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateAssociationSettings(System.Collections.Generic.List{MemberSuite.SDK.Types.NameValueStringPair})">
            <summary>
                Updates the association settings for the current association.
            </summary>
            <type>Metadata</type>
            <param name="newSettings">The new settings.</param>
            <returns></returns>
            <obsolete>This methid is obsolete and should not be used. Use <service name="SetConfigurationSetting" /> instead.</obsolete>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Get360Packet(MemberSuite.SDK.Searching.Search,System.Collections.Generic.List{MemberSuite.SDK.Searching.Search})">
            <summary>
                Executes a search for a 360 screen.
            </summary>
            <type>Metadata</type>
            <param name="primarySearch">The primary search.</param>
            <param name="oneClicks">The one clicks.</param>
            <returns></returns>
            <remarks>
                This method is used by the MemberSuite UI to execute a parallel search set for the 360 screen. The
                <param name="primarySearch" />
                is
                the main record being looked for, and the
                <param name="oneClicks" />
                are the related queries. The API will attempt to
                execute these queries in parallel for better performance than executing them in serial. Additionally, the
                <object name="Date360Packet" />
                returned will have information that will aid in creating a 360 screen of your own, including whether any relevent
                relationship types
                exist, or any custom objects tied to the target type should be displayed.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetApplicableOrganizationContactRestriction(System.String,System.String)">
            <summary>
                Gets the maximum number of allowed contacts for a given organization based on organization
                contact restriction records. Designed primarily for portal use.
            </summary>
            <param name="organizationID">The organization ID.</param>
            <param name="relationshipTypeID">The relationship type ID (optional).</param>
            <returns>ConciergeResult{System.Nullable{System.Int32}}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Save(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Saves the specified MemberSuite object to the database.
            </summary>
            <type>Database</type>
            <param name="objectToSave">The object to save.</param>
            <returns></returns>
            <remarks>
                This method will save the object and generate an audit log. Note that the audit log generation is queued
                and may appear several seconds after the actual save.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Get(System.String)">
            <summary>
                Gets a record with the specified id.
            </summary>
            <type>Database</type>
            <param name="id">The id.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Refresh(System.String)">
            <summary>
                Refreshes a record with the specified id.
            </summary>
            <type>Database</type>
            <param name="id">The id.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetObjectBySearch(MemberSuite.SDK.Searching.Search,System.String)">
            <summary>
                Gets an object from the database by search.
            </summary>
            <type>Database</type>
            <param name="searchToUse">The search to use.</param>
            <param name="fieldToUseAsObjectIdentifier" optional="true">The field to use as object identifier.</param>
            <returns></returns>
            <remarks>
                <p>
                    Very often, you'll need to return an object not by it's ID, but by an arbitrary search criteria. Use this
                    method
                    when you need to get a single object back from the database based on a criteria. Use
                    <service name="GetObjectsBySearch" />
                    when you need to retrieve multiple objects.
                </p>
                <p>
                    Note that you can achieve the same result by running <service name="ExecuteMSQL" /> with the <B>OBJECT()</B>
                    parameter. For example:
                    <code>select OBJECT() from Individual where Email='operations@membersuite.com'</code>
                    <p>The above code would pull the first object with the specified email address.</p>
                </p>
                <p>
                    You may not always want to use the ID field as the basis for getting the object. For instance, in the example
                    above,
                    you might want to pull the primary organization. Use the
                    <param name="fieldToUseAsObjectIdentifier" />
                    to indicate what field
                    the API should use to pull the object. For instance, specifiying <b>PrimaryOrganization</b> as the
                    <param name="fieldToUseAsObjectIdentifier" />
                    would return an Organization, not the Individual. By default, the system will assume you want to use <B>ID</B>,
                    if you don't specify a parameter.
                </p>
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetObjectsBySearch(MemberSuite.SDK.Searching.Search,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Gets multiple objects from the database by search.
            </summary>
            <type>Database</type>
            <param name="searchToUse">The search to use.</param>
            <param name="fieldToUseAsObjectIdentifier">The field to use as object identifier.</param>
            <param name="startRecord">The start record.</param>
            <param name="maximumNumberOfRecordsToReturn">The maximum number of records to return.</param>
            <returns></returns>
            <remarks>
                <p>
                    Very often, you'll need to return objects not by their ID, but by an arbitrary search criteria. Use this method
                    when you need to get objects back from the database based on a criteria. Use
                    <service name="GetObjectBySearch" />
                    when you need to retrieve a single object.
                </p>
                <p>
                    Note that you can achieve the same result by running <service name="ExecuteMSQL" /> with the <B>OBJECTS()</B>
                    parameter. For example:
                    <pre>
                        <code>select OBJECTS() from Individual where Email='operations@membersuite.com'</code>
                    </pre>
                    <p>The above code would pull the all objects with the specified email address.</p>
                </p>
                <p>
                    You may not always want to use the ID field as the basis for getting the object. For instance, in the example
                    above,
                    you might want to pull the primary organization. Use the <paramref name="fieldToUseAsObjectIdentifier" /> to
                    indicate what field
                    the API should use to pull the object. For instance, specifying <b>PrimaryOrganization</b> as the
                    <paramref name="fieldToUseAsObjectIdentifier" />
                    would return an Organization, not the Individual. By default, the system will assume you want to use <B>ID</B>,
                    if you don't specify a parameter.
                </p>
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DownloadFile(System.String)">
            <summary>
                Provides a url to be used to download a file from the database.
            </summary>
            <type>Database</type>
            <param name="fileID">The file ID.</param>
            <returns></returns>
            <remarks>
                Once you have this URL, you can use methods in your language to actually download the file from the specified
                ID.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetName(System.String)">
            <summary>
                Gets the name of an object.
            </summary>
            <type>Database</type>
            <param name="recordID">The record ID.</param>
            <returns></returns>
            <remarks>
                This method is optimized to quickly return the name of a specific object from the database. It's faster than
                downloading the
                entire object. Use <service name="GetNames" /> to pull multiple names.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetNames(System.Collections.Generic.List{System.String})">
            <summary>
                Gets the names of specific objects from the database.
            </summary>
            <type>Database</type>
            <param name="recordID">The record ID.</param>
            <returns>A list of names. If a record cannot be found, a null entry will be placed in the list.</returns>
            <remarks>
                This method is optimized to quickly return the name of a specific objects from the database. It's faster than
                downloading the
                entire object. Use <service name="GetName" /> to pull a single name.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllAutoNumberSeeds">
            <summary>
                Gets all auto number seeds.
            </summary>
            <type>Database</type>
            <returns></returns>
            <remarks>
                Auto-number seeds are the LocalID seeds for objects in the database that have a MemberSuite-generated numeric ID.
                This
                methods gives a list of all such seeds.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Delete(System.String)">
            <summary>
                Deletes a record with the specified id.
            </summary>
            <type>Database</type>
            <param name="id">The id.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAutoNumberSeedInfo(System.String)">
            <summary>
                Gets the auto number seed info for a specific object.
            </summary>
            <type>Database</type>
            <param name="objectName">Name of the object.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateAutoNumberSeed(System.String,System.Int64)">
            <summary>
                Updates the auto number seed for the specified object.
            </summary>
            <type>Database</type>
            <param name="objectName">Name of the object.</param>
            <param name="newSeed">The new seed.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MassUpdate(System.String,System.Collections.Generic.List{System.String},MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Performs a mass update of system records
            </summary>
            <type>Database</type>
            <param name="recordType">Type of the record.</param>
            <param name="recordIdentifiers">The record identifiers.</param>
            <param name="msoNewValues">The new values.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MassDelete(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Performs a mass delete of system records
            </summary>
            <type>Database</type>
            <param name="recordType">Type of the record.</param>
            <param name="recordIdentifiers">The record identifiers.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MassAssignEntitlements(MemberSuite.SDK.Types.MemberSuiteObject,System.Collections.Generic.List{System.String})">
            <summary>
                Masses the assign entitlements.
            </summary>
            <type>Database</type>
            <param name="msoEntitlement">The entitlement.</param>
            <param name="idsToAssign">The ids to assign.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ScheduleAssociationDataExport(System.DateTime,MemberSuite.SDK.Types.DataExportFormat,System.String)">
            <summary>
            ScheduleAssociationDataExport
            </summary>
            <param name="dateToExecute"></param>
            <param name="exportFormat"></param>
            <param name="confirmationEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeSearch(System.String,System.String)">
            <summary>
                Describes a search.
            </summary>
            <type>Search</type>
            <param name="searchType">Type of the search.</param>
            <param name="searchContext" optional="true">The search context.</param>
            <returns></returns>
            <remarks>
                Describing a search lists all of the fields and relevant information for a search type. The
                <param name="searchContext" />
                is optional
                and should only be used in cases where a contextual search is relevant (for instance, searching for
                <domainobject name="EventRegistration" />
                in the context of an <domainobject name="Event" />
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetSearchFieldMetadataFromFullPath(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Gets the search field metadata from full path.
            </summary>
            <type>Search</type>
            <param name="searchType">Type of the search.</param>
            <param name="searchContext">The search context.</param>
            <param name="fieldFullPaths">The field full paths.</param>
            <returns></returns>
            <remarks>
                This method allows you to quick extract field metadata from a search "path". For instance, if you were looking up
                <B>Individual.PrimaryOrganization.ParentOrganization__rtg.TaxID__c</B>, you might need to quickly pull the field
                metadata
                for this field without needed to run a full <service name="DescribeCompiledSearch" />. In such a case, use this
                method.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecuteSearch(MemberSuite.SDK.Searching.Search,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Executes a search.
            </summary>
            <type>Search</type>
            <param name="searchToExecute">The search to execute.</param>
            <param name="startRecord">The start record.</param>
            <param name="maximumNumberOfRecordsToReturn" optional="true">The maximum number of records to return.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecuteMSQL(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Executes the MSQL statement.
            </summary>
            <type>Search</type>
            <param name="msqlStatement">The MSQL statement.</param>
            <param name="startRecord">The start record.</param>
            <param name="maximumNumberOfRecordsToReturn" optional="true">The maximum number of records to return.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ConvertMQLToSearch(System.String)">
            <summary>
                Converts the specified MQL to a search object.
            </summary>
            <type>Search</type>
            <param name="msqlStatement">The MSQL statement.</param>
            <returns></returns>
            <remarks>
                Lots of methods take a Search object, not MSQL, and so you can use this method to take a simple MSQL script and
                convert
                it to a bona fide search object for consumption by various Concierge services.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecuteSearches(System.Collections.Generic.List{MemberSuite.SDK.Searching.Search},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Executes multiple searches in parallel.
            </summary>
            <type>Search</type>
            <param name="searchesToExecute">The searches to execute.</param>
            <param name="startRecord">The start record.</param>
            <param name="maximumNumberOfRecordsToReturn" optional="true">The maximum number of records to return.</param>
            <returns></returns>
            <remarks>
                This method will run multiple searches in parallel and return the result. It is designed to be faster than running
                the searches in multiple API calls.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeCompiledSearch(MemberSuite.SDK.Searching.Search)">
            <summary>
                Describes a compiled search, including any references fields that are cross-object.
            </summary>
            <type>Search</type>
            <param name="searchToInspect">The search to inspect.</param>
            <returns></returns>
            <remarks>
                Once a search is created, it may contain cross-object fields. For example, this output column will return the
                primary
                organizations name on an invoice:
                <p>
                    <pre>
                        <code>BillTo.PrimaryOrganization.Name</code>
                    </pre>
                </p>
                When running <service name="DescribeSearch" />, you'll only get the fields defined for that search. Because there's
                an infinite combination of
                cross-object search possibilities, you'll want to call this method when describing <i>a specific search,</i> as
                opposed to the base search.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeCompiledSearches(System.Collections.Generic.List{MemberSuite.SDK.Searching.Search})">
            <summary>
                Describes multiple compiled searches as once.
            </summary>
            <type>Search</type>
            <param name="searchesToInspect">The searches to describe.</param>
            <returns></returns>
            <remarks>See <service name="DescribeCompiledSearch" /> for more information on search description.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecuteSearchWithFileOutput(MemberSuite.SDK.Searching.Search,System.String,System.Boolean)">
            <summary>
                Executes a search that has a file output, such as Excel, CSV, or XML.
            </summary>
            <type>Search</type>
            <param name="searchToExecute">The search to execute.</param>
            <param name="searchOutputType">Type of the search output.</param>
            <param name="abortIfZeroResults">
                if set to <c>true</c>, this method will return nothing if there are zero results in
                the result set..
            </param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecutePagedSearchWithFileOutput(MemberSuite.SDK.Searching.Search,System.String,System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Executes a search that has a file output, such as Excel, CSV, or XML.
            </summary><type>Search</type>
            <param name="searchToExecute">The search to execute.</param>
            <param name="searchOutputType">Type of the search output.</param>
            <param name="abortIfZeroResults">if set to <c>true</c>, this method will return nothing if there are zero results in the result set..</param>
            <param name="startRecord">The start record.</param>
            <param name="pageSize" optional="true">The maximum number of records to return (maximum 500).</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.QuickSearch(System.String,System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Executes a "quick search" against an object.
            </summary><type>Search</type>
            <param name="searchType">Type of the search.</param>
            <param name="searchContext">The search context.</param>
            <param name="queryText">The query text.</param>
            <param name="startRecord">The start record.</param>
            <param name="maximumNumberOfRecordsToReturn" optional="true">The maximum number of records to return.</param>
            <returns></returns>
            <remarks>
                This is used throughout the MemberSuite UI for the Ajax combo boxes that must look up a record. This method will
                respect the quick search settings for a given object, and execute a quick search against it and return results.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RebuildQuickSearchIndex(System.Collections.Generic.List{System.String})">
            <summary>
            RebuildQuickSearchIndex
            </summary>
            <param name="quickSearches"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RebuildCatalogQuickSearchIndexes">
            <summary>
            RebuildCatalogQuickSearchIndexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateQuickSearch(System.String,System.String,System.String)">
            <summary>
                Generates a quick search.
            </summary>
            <type>Search</type>
            <param name="searchText">The search text.</param>
            <param name="searchContext" optional="true">The search context.</param>
            <param name="queryText">The query text.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrieveClientSideQuickSearchKeys(System.Collections.Generic.List{System.String})">
            <summary>
            RetrieveClientSideQuickSearchKeys
            </summary>
            <param name="quickSearches"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetIndexableAssociaionObjects">
            <summary>
            GetIndexableAssociaionObjects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPotentialEmailBlastRecipients">
            <summary>
                Finds all searches that can be the target of an email blast
            </summary>
            <type>Search</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ListAllSearches(System.String)">
            <summary>
                Gets a list of all searches in the system, filtered (optionally) by module
            </summary>
            <param name="moduleToFilterBy"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetRawSQLForSearch(MemberSuite.SDK.Searching.Search)">
            <summary>
                Generates sysem SQL for a search - system administrators only
            </summary>
            <param name="searchToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ConvertSearchToText(MemberSuite.SDK.Searching.Search)">
            <summary>
                Converts a search to a textual representation
            </summary>
            <param name="searchToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.FlattenSearch(MemberSuite.SDK.Searching.Search)">
            <summary>
                Converts a search to a textual representation
            </summary>
            <param name="searchToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetZipCodesWithinSpecifiedRadiusByZip(System.String,System.Int32)">
            <summary>
                Gets the zip codes within specified radius by zip.
            </summary>
            <type>GIS</type>
            <param name="zipCode">The zip code.</param>
            <param name="radiusInMiles">The radius in miles.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetZipCodesWithinSpecifiedRadiusByCityState(System.String,System.String,System.Int32)">
            <summary>
                Gets the state of the zip codes within specified radius by city.
            </summary>
            <type>GIS</type>
            <param name="city">The city.</param>
            <param name="twoLetterState">State of the two letter.</param>
            <param name="radiusInMiles">The radius in miles.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetRelevantAnnouncements(MemberSuite.SDK.Types.TenantLevel)">
            <summary>
                Gets the announcements for a user
            </summary>
            <param name="tenantLevelForAnnouncements"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DismissAnnouncement(System.String)">
            <summary>
                Dismisses an announcement, so that it is no longer shown to the user
            </summary>
            <param name="announcementID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.PreviewEmailBlast(MemberSuite.SDK.Types.MemberSuiteObject,System.String,System.Int32)">
            <summary>
                Previews an email blast.
            </summary>
            <type>Messaging</type>
            <param name="templateToUse">The template to use.</param>
            <param name="destinationEmail">The destination email.</param>
            <param name="count">
                The number of records to merge for the preview. The maximum value is ten (10) - if you specify less than 1 or more
                than
                10, 10 will be used.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetEmailTemplate(System.String)">
            <summary>
                Retrieves an email template from the database by name (for built in templates), or ID (for custom templates.
            </summary>
            <type>Messaging</type>
            <param name="nameOrIDOfTemplate">The name or ID of the template to retrieve.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendMultipleTransactionalEmails(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Sends an email through MemberSuite
            </summary>
            <type>Messaging</type>
            <param name="emailTemplateNameOrID">Name or ID of the email template.</param>
            <param name="targets">
                The targets to send to. This will be a list of IDs, and will depend on the target type of
                the specified email template.
            </param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendTransactionalEmail(System.String,System.String,System.String)">
            <summary>
                Sends an email through MemberSuite
            </summary>
            <type>Messaging</type>
            <param name="emailTemplateNameOrID">Name or ID of the email template.</param>
            <param name="target">
                The target to send to. This will be a MemberSuiteObject ID, and will depend on the target type of
                the specified email template.
            </param>
            <param name="overrideEmailAddress" optional="true">
                You can optionally override the email address and send the message to
                a specific address.
            </param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllEmailTemplates">
            <summary>
                Gets all built-in email templates in the system.
            </summary>
            <type>Messaging</type>
            <returns></returns>
            <remarks>
                Even thought this method only returns built-in email templates, it <i>will</i> respect any
                overrides saved of the built-in templates. So if the logged in association customized the Welcome email, you'll get
                the customized version, not the original, built-in version.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RepopulateGeographicalRegions">
            <summary>
            RepopulateGeographicalRegions
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DetermineGeographicalRegion(System.String,MemberSuite.SDK.Types.Address)">
            <summary>
            DetermineGeographicalRegion
            </summary>
            <param name="assignmentRuleSetID"></param>
            <param name="addressToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ValidateAddress(MemberSuite.SDK.Types.Address)">
            <summary>
                Validates an address.
            </summary>
            <type>Data Quality</type>
            <param name="addressToValidate">The address to validate.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.PopulateCityStateFromPostalCode(MemberSuite.SDK.Types.Address)">
            <summary>
                Populates the city state from postal code.
            </summary>
            <type>Data Quality</type>
            <param name="addressToProcess">The address to process.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.FindPotentialDuplicates(MemberSuite.SDK.Types.MemberSuiteObject,System.Collections.Generic.List{System.String},MemberSuite.SDK.Searching.Search,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Finds the potential duplicates.
            </summary>
            <type>Data Quality</type>
            <param name="mso">The.</param>
            <param name="ruleIDs">The rule IDs.</param>
            <param name="spec">The search spec to use.</param>
            <param name="startRecord">The start record.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultDuplicateDetectionRules(System.String)">
            <summary>
                Gets the default duplicate detection rules.
            </summary>
            <type>Data Quality</type>
            <param name="recordType">Type of the record.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.Merge(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Merges two records together, overriding the target with specified source fields
            </summary>
            <type>Data Quality</type>
            <param name="source">The source record.</param>
            <param name="destination">The destination record.</param>
            <param name="sourceFieldsToUse" optional="true">
                The source fields to use. These will override the corresponding fields
                in the destination
            </param>
            <returns></returns>
            <remarks>
                Though most commonly used for Individuals/Organizations, you can merge any record types in MemberSuite. All linked
                objects
                will move over to the destination object, and the source object will be deleted. Any fields specified in the
                <param name="sourceFieldsToUse" />
                will be copied to the destination.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ValidateMultipleAddresses(System.Collections.Generic.List{System.String})">
            <summary>
                Validates multiple addresses at once.
            </summary>
            <type>Data Quality</type>
            <param name="entityIdentifiers">The IDs of the entities to validate.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CheckLongRunningTaskStatus(MemberSuite.SDK.Types.LongRunningTaskInfo)">
            <summary>
            CheckLongRunningTaskStatus
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SignalEndOfLongRunningTaskPolling(MemberSuite.SDK.Types.LongRunningTaskInfo)">
            <summary>
            SignalEndOfLongRunningTaskPolling
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ScheduleBulkAddressValidation(System.Collections.Generic.List{System.String})">
            <summary>
            Schdules multiple addresses validation to be executed all at once.
            </summary><type>Data Quality</type>
            <param name="entityIdentifiers">The IDs of the entities to validate.</param>
            <returns></returns>
            <remarks>This method uses a queued model as a result, it will return immediately even though the valiation process is not completed.
             Ping the <service name="CheckLongRunningTaskStatus"/> to see when the validation is completed.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MassUpdateAddressStates(System.String,System.String)">
            <summary>
            MassUpdateAddressStates
            </summary>
            <param name="oldStateValue"></param>
            <param name="newStateValue"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MassUpdateAddressCountries(System.String,System.String)">
            <summary>
            MassUpdateAddressCountries
            </summary>
            <param name="oldCountryValue"></param>
            <param name="newCountryValue"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrieveLogiServerInformation">
            <summary>
            RetrieveLogiServerInformation
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RenderReport(MemberSuite.SDK.Manifests.Reporting.ReportManifest)">
            <summary>
                Renders a reportin PDF format
            </summary>
            <type>Reporting</type>
            <param name="manifest">The report manifest.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.LoadReportDefinition(MemberSuite.SDK.Manifests.Reporting.ReportManifest)">
            <summary>
                Loads the report definition from the database
            </summary>
            <type>Reporting</type>
            <param name="manifest">The manifest.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ListAllReports">
            <summary>
                Lists all built-in reports in MemberSuite.
            </summary>
            <type>Reporting</type>
            <returns></returns>
            <remarks>This method will not pull custom reports - use a query if you need to get these reports as well.</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetReportInformation(System.String)">
            <summary>
                Gets the report information for a specific report.
            </summary>
            <type>Reporting</type>
            <param name="reportName">Name of the report.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateLogiActiveSqlMetadataFileIfNecessary">
            <summary>
            This method will kick off the LogiActiveSqlMetadataGeneratorWorkflow for creating 
            the logi active sql metadata file for an association
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.PingExtensionService(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Pings the extension service to see if it is operational.
            </summary>
            <type>Integration</type>
            <param name="msoService">The service.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExecuteMailMerge(MemberSuite.SDK.Searching.Search,System.String,MemberSuite.SDK.Types.MailMergeOutputFormat,System.Boolean,System.String,System.String)">
            <summary>
                Executes a mail merge, and optionally creates an activity.
            </summary>
            <type>Integration</type>
            <param name="searchToUse">The search to use.</param>
            <param name="mailMergeTemplate">The mail merge template.</param>
            <param name="outputFormat">The output format.</param>
            <param name="createActivity" optional="true">if set to <c>true</c> [create activity].</param>
            <param name="activityTypeID" optional="true">The activity type ID.</param>
            <param name="activityMemo" optional="true">The activity memo.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SetConfigurationSetting(System.String,System.String,System.String,System.String)">
            <summary>
                Sets a configuration setting.
            </summary>
            <type>Integration</type>
            <param name="ns">The namespace of the configuration setting.</param>
            <param name="name">Name of the configuration setting.</param>
            <param name="value">The configuration setting value.</param>
            <param name="description">The description of the configuration setting</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetConfigurationSetting(System.String,System.String)">
            <summary>
                Gets a configuration setting by namespace/name.
            </summary>
            <type>Integration</type>
            <param name="ns">The namespace of the configuration setting.</param>
            <param name="settingName">The name of the configuration setting.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllConfigurationSettings(System.String)">
            <summary>
                Gets all configuration settings for a specific namespace.
            </summary>
            <type>Integration</type>
            <param name="ns" optional="true">The namespace. If left blank, all settings are returned.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAvailableAssociationTemplates">
            <summary>
                Gets the available association templates that can be used to create a new association
            </summary>
            <type>Provisioning</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProvisionAssociation(System.String,MemberSuite.SDK.Types.MemberSuiteObject,System.String,System.Boolean)">
            <summary>
                Provisions an association.
            </summary>
            <type>Provisioning</type>
            <param name="sourceAssociationID">The source association ID.</param>
            <param name="msoAssociation">The association.</param>
            <param name="confirmationEmail">The confirmation email.</param>
            <param name="includeData">if set to <c>true</c> [include data].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MoveAssociation(System.String,System.String)">
            <summary>
                Moves an association to a different database
            </summary>
            <param name="sourceAssociationID">The source association ID.</param>
            <param name="destinationDatabase">The destination database.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ObliterateAssociation(System.String)">
            <summary>
                Obliterates the association.
            </summary>
            <type>Provisioning</type>
            <param name="associationID">The association ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDatabaseServers">
            <summary>
                Returns all the database servers available in the system
            </summary>
            <type>Provisioning</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetConciergeAPIVersion">
            <summary>
                Gets the concierge API version.
            </summary>
            <type>Diagnostics</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.FlushCaches">
            <summary>
                Flushes all caches for the current logging in association.
            </summary>
            <type>Diagnostics</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetRelatedPaymentsForInvoice(System.String)">
            <summary>
                Gets the related payments for an invoice.
            </summary>
            <type>Financial</type>
            <param name="invoiceID">The invoice ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetOpenBatches(System.String)">
            <summary>
                Gets all open batches that are accessible to the currently logged in user.
            </summary>
            <type>Financial</type>
            <returns></returns>
            <remarks>
                Because batches can have security rules attach to them, you'll want to use this method to ensure
                that only batches that are accessible to the current user are retrieved.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.AdjustInvoice(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Adjusts the specified invoice.
            </summary>
            <type>Financial</type>
            <param name="msInvoice">The invoice to adjust</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAllProductsInBatch(System.Collections.Generic.List{System.String})">
            <summary>
                Gets all products in batch.
            </summary>
            <type>Financial</type>
            <param name="batchIDs">The batch IDs to check</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RenderInvoice(System.String)">
            <summary>
                Renders an invoice, using the associatoin specific rules for doing so.
            </summary>
            <param name="invoiceID">The invoice ID.</param>
            <returns>ConciergeResult{System.String}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RenderInvoices(MemberSuite.SDK.Searching.Search,System.Nullable{System.Int32})">
            <summary>
                Renders invoices to PDF based on the results of a search.
            </summary>
            <param name="searchToUse">The search to use.</param>
            <remarks>
                Any search can be used, provided it has only one output column - the output column
                that will represent the invoice ID.
            </remarks>
            <returns>ConciergeResult{System.String}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.WipeProFormaInvoices(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Wipes all pro forma invoices from the system that are dated prior to the specified date.
            </summary>
            <type>Financial</type>
            <param name="wipeInvoicesBefore">The cutoff date to use.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DetermineAllowableInvoicePaymentMethods(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
            DetermineAllowableInvoicePaymentMethods
            </summary>
            <param name="payment"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DetermineAllowableOrderPaymentMethods(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
            DetermineAllowableOrderPaymentMethods
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DetermineAllowableGiftPaymentMethods(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
            DetermineAllowableGiftPaymentMethods
            </summary>
            <param name="gift"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.PostBatches(System.Collections.Generic.List{System.String},System.String)">
            <summary>
                Posts a batch.
            </summary>
            <type>Financial</type>
            <param name="batchIDs">The batch Ids.</param>
            <param name="newBatchForProFormaInvoices" optional="true">The new batch for pro forma invoices.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPostBatchesResult(MemberSuite.SDK.Types.LongRunningTaskInfo)">
            <summary>
                Retrieves batch posting results
            </summary>
            <param name="taskInfo">Workflow information</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ChangeBatch(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Changes the batch of one or more financial transactions
            </summary>
            <type>Financial</type>
            <param name="targetBatchID">The target batch ID.</param>
            <param name="transactionsToChange">The transactions to change.</param>
            <returns></returns>
            <remarks>
                Because you can't modify transactions directly using the database services, this method
                makes it easy to move transactions from one batch to another en masse
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UnPostBatches(System.Collections.Generic.List{System.String})">
            <summary>
                Unposts one or more batches.
            </summary>
            <type>Financial</type>
            <param name="batchIDs">The batch Ids.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DownloadBatches(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Downloads one or more batches.
            </summary>
            <type>Financial</type>
            <param name="batchIDs">The batch I ds.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateBatchReadinessReport(System.Collections.Generic.List{System.String})">
            <summary>
                Gets a batch readiness report to determine whether or not the specified batches can be posted.
            </summary>
            <type>Financial</type>
            <param name="batches">The batch IDs to examine.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessPayment(MemberSuite.SDK.Types.MemberSuiteObject,MemberSuite.SDK.Types.ElectronicPaymentManifest,System.String)">
            <summary>
                Processes a credit card payment.
            </summary>
            <param name="paymentToRecord">The payment to record.</param>
            <param name="paymentToProcess">The payment to process.</param>
            <param name="antiDuplicationKey">The anti duplication key.</param>
            <returns>ConciergeResult{PaymentProcessorResponse}.</returns>
            <type>Financial</type>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ReversePayment(System.String,System.String,System.String)">
            <summary>
                Reverses a payment.
            </summary>
            <type>Financial</type>
            <param name="paymentID">The payment ID.</param>
            <param name="batchID">The batch ID.</param>
            <param name="memo">The memo.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.VoidPayment(System.String,System.Boolean)">
            <summary>
                Voids a payment.
            </summary>
            <type>Financial</type>
            <param name="paymentID">The payment ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.EditRevenueRecognitionSchedule(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Edits a revenue recognition schedule.
            </summary>
            <type>Financial</type>
            <param name="revenueRecognitionSchedule">The revenue recognition schedule to edit.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.EditBillingSchedule(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Edits a billing schedule.
            </summary>
            <type>Financial</type>
            <param name="billingSchedule">The billing schedule to edit.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CancelBillingSchedule(System.String)">
            <summary>
                Cancels a billing schedule.
            </summary>
            <type>Financial</type>
            <param name="billingScheduleId">The billing schedule ID to cancel.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ReinstateBillingSchedule(System.String)">
            <summary>
                Reinstates a cancelled billing schedule.
            </summary>
            <type>Financial</type>
            <param name="billingScheduleId">The billing schedule ID to cancel.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessBillingScheduleEntry(System.String,System.DateTime)">
            <summary>
                Processes the billing schedule entry.
            </summary>
            <type>Financial</type>
            <param name="scheduleID">The schedule ID.</param>
            <param name="date">The date to use for processing. All entries on this date will be processed</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ExpandOrShrinkFiscalYear(System.String,System.DateTime)">
            <summary>
                Closes a fiscal period.
            </summary>
            <type>Financial</type>
            <param name="fiscalYearID">The fiscal year ID.</param>
            <param name="periodNumber">The period number.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ClosePeriod(System.String,System.Int32)">
            <summary>
                Closes a fiscal period.
            </summary>
            <type>Financial</type>
            <param name="fiscalYearID">The fiscal year ID.</param>
            <param name="periodNumber">The period number.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CloseFiscalYear(System.String)">
            <summary>
            CloseFiscalYear
            </summary>
            <param name="fiscalYearID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ReopenFiscalPeriod(System.String,System.Int32)">
            <summary>
                Reopens a fiscal period.
            </summary>
            <type>Financial</type>
            <param name="fiscalYearID">The fiscal year ID.</param>
            <param name="periodNumber">The period number.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeProducts(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Describes the products, adding in the product information and price for
                the customer specified.
            </summary>
            <type>Financial</type>
            <param name="entityID" optional="true">The entity ID.</param>
            <param name="productsToDescribe">The products to describe.</param>
            <returns></returns>
            <remarks>
                Since products have custom pricing rules, the price will be different depending on the
                purchaser of the product. This method will list pricing for a specific purchase, or if
                <param name="entityID" />
                is left null,
                an anonymous purchaser.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CalculateExpirationDate(System.String,System.DateTime)">
            <summary>
                Calculates the expiration date for a given product and reference date
            </summary>
            <param name="productID"></param>
            <param name="referenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.VoidOrder(System.String)">
            <summary>
                Voids the specified order.
            </summary>
            <type>Order Processing</type>
            <param name="orderID">The order ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetOrderForm(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Gets the order form questions for a given order based on the products in the order
            </summary>
            <type>Order Processing</type>
            <param name="order">The order.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetOrderFormForProduct(System.String)">
            <summary>
                Gets the order form for a product.
            </summary>
            <type>Order Processing</type>
            <param name="productID">The product ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateOrderBillingInfo(System.String,MemberSuite.SDK.Types.ElectronicPaymentManifest)">
            <summary>
                Updates the order billing info.
            </summary>
            <param name="orderID">The order ID.</param>
            <param name="paymentInfo">The payment info.</param>
            <returns>ConciergeResult.</returns>
            <type>Order Processing</type>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateInvoiceBillingInfo(System.String,System.String,System.String,MemberSuite.SDK.Types.Address)">
            <summary>
                Allows modification of billing information on an invoice even if it is already posted.
            </summary>
            <type>Order Processing</type>
            <param name="invoiceID">The invoice ID.</param>
            <param name="poNumber">The po number.</param>
            <param name="billingEmailAddress">The billing email address.</param>
            <param name="billingAddress">The billing address.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.AdjustOrder(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Adjusts an order.
            </summary>
            <type>Order Processing</type>
            <param name="msOrderToAdjust">The order to adjust.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessReturn(MemberSuite.SDK.Types.MemberSuiteObject,System.Boolean)">
            <summary>
                Processes a return.
            </summary>
            <type>Order Processing</type>
            <param name="msReturn">The return.</param>
            <param name="autoGenerateRefunds">if set to <c>true</c> [auto generate refunds].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateRenewalOrder(System.String)">
            <summary>
                Generates a renewal order for a membership/subscription
            </summary>
            <type>Order Processing</type>
            <param name="targetID">The target ID o the membership/subscription.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateUpgradeOrder(System.String,System.String)">
            <summary>
                Generates a renewal order for a membership/subscription
            </summary>
            <type>Order Processing</type>
            <param name="targetID">The target ID o the membership/subscription.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.FulfillOrder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Fulfills an order.
            </summary>
            <type>Order Processing</type>
            <param name="orderID">The order ID.</param>
            <param name="itemsToFulfill">The items to fulfill.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ShipOrder(System.String,System.Collections.Generic.List{System.String},System.DateTime,System.String,System.String)">
            <summary>
                Ships an order.
            </summary>
            <type>Order Processing</type>
            <param name="orderID">The order ID.</param>
            <param name="itemsToShip">The items to ship.</param>
            <param name="shipDate">The ship date.</param>
            <param name="shippingMethod">The shipping method.</param>
            <param name="trackingNumber">The tracking number.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.PreProcessOrder(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Pre-processes an order
            </summary>
            <type>Order Processing</type>
            <param name="msOrderToFinalize">The order to pre-process.</param>
            <returns></returns>
            <remarks>
                Once a customer adds a bunch of products to their card, the system needs to determine what the prices for those
                products are,
                if any taxes or shipping charges need to be added, and what additional products need to be added. This process is
                known as <i>Pre-Processing</i>.
                You'll want to preprocess an order before passing it to <service name="ProcessOrder" />.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CalculateCancellationFee(System.String,System.String,System.Int32)">
            <summary>
            CalculateCancellationFee
            </summary>
            <param name="orderID"></param>
            <param name="orderLineItemID"></param>
            <param name="quantityToCancel"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessFulfillmentBatch(System.String)">
            <summary>
            ProcessFulfillmentBatch
            </summary>
            <param name="fulfillmentBatchID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessOrder(MemberSuite.SDK.Types.MemberSuiteObject,MemberSuite.SDK.Manifests.OrderPayload)">
            <summary>
            ProcessOrder
            </summary>
            <param name="msOrder"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ApplyDiscountCodeToOrder(System.String,System.String)">
            <summary>
            ApplyDiscountCodeToOrder
            </summary>
            <param name="orderID"></param>
            <param name="discountCode"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ApplyDiscountCodeToOrderWithoutTransactions(System.String,System.String,System.Decimal)">
            <summary>
            ApplyDiscountCodeToOrderWithoutTransactions
            </summary>
            <param name="orderID"></param>
            <param name="discountCode"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrieveAvailableShippingServices(System.String)">
            <summary>
                Retrieves available services for selected carrier account.
            </summary>
            <param name="carrierAccoountID">Carrier account ID</param>
            <returns>MemberSuiteObject</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecalculateFlowDown(System.String,System.String)">
            <summary>
                Recalculates all flow down for an association for a specific type of object
            </summary>
            <param name="typeOfObject">The type of object.</param>
            <returns>ConciergeResult.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecalculatePrimaryMembership(System.String)">
            <summary>
                Recalculates the primary membership for a given ID
            </summary>
            <param name="targetEntityID">The target entity identifier.</param>
            <returns>ConciergeResult.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RecalculatePrimaryOrganization(System.String)">
            <summary>
            RecalculatePrimaryOrganization
            </summary>
            <param name="targetEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPrimaryMembership(System.String,System.String)">
            <summary>
                Gets the primary membership for an entity
            </summary>
            <type>Membership</type>
            <param name="membershipOrganizationID">The membership organization ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultOrganizationalLayerProduct(System.String,System.String)">
            <summary>
                Gets the default Organizational Layer product for a specific membership type
            </summary>
            <type>Membership</type>
            <param name="membershipTypeID">The membership type ID.</param>
            <param name="organizationalLayerID">The Organizational Layer ID.</param>
            <returns>
                Either the applicable Organizational Layer Dues Product or null if the supplied Membership Type does not match
                a product
            </returns>
            <remarks>If no dues product is defined for the supplied Membership Type, this method will return null</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultChapterProduct(System.String,System.String)">
            <summary>
                Gets the default chapter product for a specific membership type
            </summary>
            <type>Membership</type>
            <param name="membershipTypeID">The membership type ID.</param>
            <param name="chapterID">The chapter ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultChapterProduct2(System.String,System.String,System.String)">
            <summary>
            GetDefaultChapterProduct2
            </summary>
            <param name="entityToCheck"></param>
            <param name="membershipTypeID"></param>
            <param name="chapterID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultSectionProduct(System.String,System.String)">
            <summary>
                Gets the default section product for a specific membership type.
            </summary>
            <type>Membership</type>
            <param name="membershipTypeID">The membership type ID.</param>
            <param name="sectionID">The section ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDefaultSectionProduct2(System.String,System.String,System.String)">
            <summary>
                Gets the default section product for a specific membership type.
            </summary>
            <type>Membership</type>
            <param name="membershipTypeID">The membership type ID.</param>
            <param name="sectionID">The section ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetApplicableMembershipDuesProducts(System.String,System.String)">
            <summary>
                Gets the applicable membership dues products for a customer.
            </summary>
            <type>Membership</type>
            <param name="membershipOrganizationID">The membership organization ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DropMemberships(MemberSuite.SDK.Searching.Search,System.String,System.String,System.DateTime)">
            <summary>
                Drops the specified memberships.
            </summary>
            <type>Membership</type>
            <param name="searchToUseForDrop">The search to use for the drop.</param>
            <param name="terminationReasonID">The termination reason ID.</param>
            <param name="newStatusID">The new status ID.</param>
            <param name="terminationDate">The termination date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetApplicableChaptersForMembershipType(System.String)">
            <summary>
                Gets the type of the applicable chapters for membership.
            </summary>
            <type>Membership</type>
            <param name="membershipTypeID">The membership type ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SuggestChapter(System.String,System.String)">
            <summary>
                Suggests a chapter based on postal code mappings.
            </summary>
            <type>Membership</type>
            <param name="membershipOrganizationID">The membership organization ID.</param>
            <param name="potentialMemberID">The potential member ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetApplicableRegistrationFees(System.String,System.String)">
            <summary>
                Gets the applicable registration fees for a given event.
            </summary>
            <type>Events</type>
            <param name="eventID">The event ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.TransferRegistration(System.String,System.String)">
            <summary>
            TransferRegistration
            </summary>
            <param name="registrationID"></param>
            <param name="targetEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SwapSessions(System.String,System.Collections.Generic.List{System.String},MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
            SwapSessions
            </summary>
            <param name="registrationID"></param>
            <param name="sessionRegistrationsToSwap"></param>
            <param name="orderForReplacementSessions"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CancelRegistration(System.String,MemberSuite.SDK.Types.RegistrationCancellationOptions)">
            <summary>
            CancelRegistration
            </summary>
            <param name="registrationID"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetEventManifest(System.String,System.String,System.String)">
            <summary>
                Gets the event manifest, including sessions, guest reg types, etc
            </summary>
            <type>Events</type>
            <param name="eventID">The event ID.</param>
            <param name="entityID">The entity ID.</param>
            <param name="registrationFeeID">The registration fee ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CloneEvent(System.String,MemberSuite.SDK.Types.MemberSuiteObject,MemberSuite.SDK.Args.CloneEventArgs)">
            <summary>
            Clones the event.
            </summary>
            <param name="srcEventID">The source event ID.</param>
            <param name="msoNewEventValues">The new event values.</param>
            <param name="cloneEventArgs">The <see cref="T:MemberSuite.SDK.Args.CloneEventArgs"/> instance containing the event data.</param>
            <returns>ConciergeResult&lt;MemberSuiteObject&gt;.</returns>
            <type>Events</type>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MoveAbstractsToCompetition(System.String)">
            <summary>
                Moves all unmigrated abstracts to competition as competition entries, so they can be judged.
            </summary>
            <param name="competitionID">The competition ID.</param>
            <returns>ConciergeResult{MemberSuiteObject}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ApplyToJobPosting(System.String,System.String)">
            <summary>
                Applies a resume to a job posting.
            </summary>
            <type>Career Center</type>
            <param name="jobPostingID">The job posting ID.</param>
            <param name="resumeID">The resume ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetResumeAsHtml(System.String)">
            <summary>
                Gets a resume as HTML.
            </summary>
            <type>Career Center</type>
            <param name="resumeID">The resume ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateDonorAcknowledgmentLetter(System.String,System.Boolean)">
            <summary>
                Generates a single donor acknowledgment letter.
            </summary>
            <type>Fundraising</type>
            <param name="GiftID">The Gift ID.</param>
            <param name="logActivity">if set to <c>true</c> [log activity].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateDonorAcknowledgmentLetters(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
                Generates multiple donor acknowledgment letters, and returns a zip file
            </summary>
            <type>Fundraising</type>
            <param name="listOfGifts">The list of gifts.</param>
            <param name="logActivity">if set to <c>true</c> [log activity].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateDonorReceipt(System.String)">
            <summary>
                Generates the donor receipt.
            </summary>
            <type>Fundraising</type>
            <param name="GiftID">The gift ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateDonorReceipts(System.Collections.Generic.List{System.String})">
            <summary>
                Generates donor receipts.
            </summary>
            <type>Fundraising</type>
            <param name="listOfGifts">The list of gifts.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CreateGift(MemberSuite.SDK.Types.MemberSuiteObject,MemberSuite.SDK.Types.ElectronicPaymentManifest)">
            <summary>
                Creates a gift.
            </summary>
            <type>Fundraising</type>
            <param name="msoGiftToCreate">The gift to create.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.VoidGift(System.String)">
            <summary>
                Voids the gift.
            </summary>
            <type>Fundraising</type>
            <param name="giftIdToVoid">The gift id to void.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessPremiums(System.String,System.String)">
            <summary>
                Processes the specified premiums.
            </summary>
            <type>Fundraising</type>
            <param name="giftToProcess">The gift to process.</param>
            <param name="batchID">The batch ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ProcessGiftInstallment(System.String,System.String)">
            <summary>
                Processes installment
            </summary>
            <param name="giftId">The gift id.</param>
            <param name="installmentToProcess">Installment to process</param>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAvailableExhibitorRegistrationWindows(System.String,System.String)">
            <summary>
                Gets the available exhibitor registration windows for a particular show/entity
            </summary>
            <type>Exhibits</type>
            <param name="showID">The show ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAvaialbleExhibitBooths(System.String,System.String)">
            <summary>
                Gets the avaialble exhibit booths.
            </summary>
            <type>Exhibits</type>
            <param name="showID">The show ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrieveOrCreateExhibitorRecord(System.String,System.String)">
            <summary>
                Retrieves the exhibit record for a specific show/entity, or creates one if none exists
            </summary>
            <type>Exhibits</type>
            <param name="showID">The show ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.RetrieveAccessibleExhibitorRecords(System.String,System.String)">
            <summary>
                Retrieves the accessible exhibitor records for a specific entity.
            </summary>
            <type>Exhibits</type>
            <param name="showID">The show ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks>
                Use this method to determine what exhibitor records a individual/organization can access based on their
                relationships.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CheckForExhibitorContactRestriction(System.String,System.String)">
            <summary>
                Checks for an exhibitor contact restriction.
            </summary>
            <type>Exhibits</type>
            <param name="exhibitorID">The exhibitor ID.</param>
            <param name="contactTypeID">The contact type ID.</param>
            <returns>The Exhibitor Contact Restriction object if one exists; if no restriction is in place, this returns null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CloneExhibitShow(MemberSuite.SDK.Concierge.Parameters.CloneExhibitShowRequest)">
            <summary>
            CloneExhibitShow
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MatchVolunteersToJobOccurrences(System.String)">
            <summary>
                Matches up volunteers to a specified job occurrence
            </summary>
            <type>Volunteers</type>
            <param name="jobOccurrenceID">The job occurrence ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.MatchJobOccurrencesToVolunteer(System.String)">
            <summary>
                Matches up job occurrences to a volunteer
            </summary>
            <type>Volunteers</type>
            <param name="volunteerID">The volunteer ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetFileCabinetRootFolder(System.String)">
            <summary>
                Gets the file cabinet for a specified target, and creates one if it doesn't exist
            </summary>
            <type>Documents</type>
            <param name="targetID">The target ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribeFolder(System.String)">
            <summary>
                Describes a file folder.
            </summary>
            <type>Documents</type>
            <param name="folderID">The folder ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DeleteFolderTree(System.String)">
            <summary>
                Deletes a folder tree.
            </summary>
            <type>Documents</type>
            <param name="folderID">The folder ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SearchForFilesWithinFolder(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Searches for files within folder.
            </summary>
            <type>Documents</type>
            <param name="folderID">The folder ID.</param>
            <param name="textToSearch">The text to search.</param>
            <param name="startRecord">The start record.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SearchForFilesGlobally(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Searches for files globally.
            </summary>
            <type>Documents</type>
            <param name="textToSearch">The text to search.</param>
            <param name="startRecord">The start record.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetAccessiblePortalForms(System.String)">
            <summary>
                Gets the accessible portal forms.
            </summary>
            <type>Portal</type>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.DescribePortalForm(System.String,System.String)">
            <summary>
                Describes the portal form.
            </summary>
            <type>Portal</type>
            <param name="formID">The form ID.</param>
            <param name="entityID">The entity ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.CheckEntitlement(System.String,System.String,System.String)">
            <summary>
                Checks for an entitlement.
            </summary>
            <type>Portal</type>
            <param name="type">The type.</param>
            <param name="entityID">The entity ID.</param>
            <param name="context">The context.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.AdjustEntitlementAvailableQuantity(System.String,System.String,System.String,System.Decimal)">
            <summary>
                Adjusts the entitlement quantity for an entity/entititlement type.
            </summary>
            <type>Portal</type>
            <param name="entityID">The entity ID.</param>
            <param name="typeOfEntitlement">The type of entitlement.</param>
            <param name="context">The context.</param>
            <param name="amountToAdjust">The amount to adjust.</param>
            <returns></returns>
            <remarks>
                This method will find the first available entitlement, and adjust the quantity. Use
                a negative value to adjust it downward. If it cannot find an entitlement or a specified context/type, it
                will create one with the adjusted value.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.ListEntitlements(System.String,System.String)">
            <summary>
                Gets all of the entitlements for an entity
            </summary>
            <type>Portal</type>
            <param name="entityID">The entity ID.</param>
            <param name="type">(Optional) the type of entitlement you'e looking for. If null, then all entitlements are returned.</param>
            <returns></returns>
            <remarks>
                This method will properly "collapse" entitlements and return one record for each
                entitlement type/context. In other words, if you have two job posting entitlements, the system
                will only return one record, with the combined quantity/quantity available. That's why you want
                to call this method, rather than just running a search.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetPortalUrl">
            <summary>
                Gets the portal URL.
            </summary>
            <type>Portal</type>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetMostRecentNetPromoterScore">
            <summary>
            GetMostRecentNetPromoterScore
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SubmitNetPromoterScore(System.Int16,System.String)">
            <summary>
            SubmitNetPromoterScore
            </summary>
            <param name="score"></param>
            <param name="comments"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GetDiscussionBoard(System.String)">
            <summary>
                Gets the DiscussionBoard for a specified target, and creates one if it doesn't exist
            </summary>
            <type>Discussions</type>
            <param name="targetID">The target ID.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendEmailsToSubscribedEntities(System.String)">
            <summary>
                Sends the Discussion Topic Subscription Post Notice to each Entity who has subscribed to the topic notifying them
                that the specified post is now available
            </summary>
            <param name="discussionPostId">The Discussion Post to notify subscribed Entities about</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.GenerateBillingRunFromTemplate(System.String,System.DateTime)">
            <summary>
            GenerateBillingRunFromTemplate
            </summary>
            <param name="recurringBillingRunID"></param>
            <param name="dtReferenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateBillingInfo(System.String,MemberSuite.SDK.Types.ElectronicPaymentManifest)">
            <summary>
            UpdateBillingInfo
            </summary>
            <param name="objectToUpdate"></param>
            <param name="paymentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.UpdateBillingRunActivity(System.String,System.Nullable{System.Boolean})">
            <summary>
            UpdateBillingRunActivity
            </summary>
            <param name="activityID"></param>
            <param name="isCancelled"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.VerifyPriorityConnection">
            <summary>
            VerifyPriorityConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendEmail(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            SendEmail
            </summary>
            <param name="emailTemplateName"></param>
            <param name="contexts"></param>
            <param name="overrideEmailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Concierge.IConciergeAPIService.SendCustomizedEmail(MemberSuite.SDK.Types.EmailTemplate,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            SendCustomizedEmail
            </summary>
            <param name="template"></param>
            <param name="contexts"></param>
            <param name="overrideEmailAddress"></param>
            <returns></returns>
        </member>
        <member name="T:MemberSuite.SDK.Results.ConciergeResult">
            <summary>
                Base class for all return values for concierge services
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.ConciergeResult"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult.AddError(MemberSuite.SDK.Concierge.ConciergeErrorCode,System.String)">
            <summary>
                Adds the error.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="msg">The MSG.</param>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult.AddError(MemberSuite.SDK.Concierge.ConciergeErrorCode,System.String,System.String)">
            <summary>
                Adds the error.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="msg">The MSG.</param>
            <param name="offendingField">The offending field.</param>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult.AddError(MemberSuite.SDK.Concierge.ConciergeError)">
            <summary>
                Adds the error.
            </summary>
            <param name="err">The err.</param>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult.AddErrorRange(System.Collections.Generic.IEnumerable{MemberSuite.SDK.Concierge.ConciergeError})">
            <summary>
                Adds the error range.
            </summary>
            <param name="errors">The errors.</param>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.Success">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Results.ConciergeResult"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.Cacheable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Results.ConciergeResult"/> is cacheable.
            </summary>
            <value><c>true</c> if cacheable; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.NotModified">
            <summary>
                Gets or sets a value indicating whether [not modified].
            </summary>
            <value><c>true</c> if [not modified]; otherwise, <c>false</c>.</value>
            If a request was sent with an IfModifiedSince header, this value is set to true to indicate
            that nothing has been modified.
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.Errors">
            <summary>
                Gets or sets the errors.
            </summary>
            <value>The errors.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.WorkflowExecutionID">
            <summary>
                If the request results in a workflow being run, this is the
                workflow ID
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.WorkflowRunID">
            <summary>
                If the request results in a workflow being run, this is the
                Run ID (a workflow may be run multiple times)
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult.FirstErrorMessage">
            <summary>
                Gets the first error message.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.DataLoader.FileTransmissionInstructions">
            <summary>
                Class used to instruct the data loader client on how to transport
                files to the server
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.DataLoader.FileTransmissionInstructions.SessionID">
            <summary>
                Gets or sets the session ID.
            </summary>
            <value>The session ID.</value>
            <remarks>This session ID should be passed back to the serverfs</remarks>
        </member>
        <member name="F:MemberSuite.SDK.DataLoader.MarkerCache._cache">
            <summary>
                Gets or sets the id markers.
            </summary>
            <value>The id markers.</value>
        </member>
        <member name="P:MemberSuite.SDK.DataLoader.MarkerCache.Cache">
            <summary>
                Gets or sets the id markers.
            </summary>
            <value>The id markers.</value>
        </member>
        <member name="P:MemberSuite.SDK.DuplicateDetection.DuplicateDetectionRule.Type">
            <summary>
                Gets or sets the type of object
                this rule applies to.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MemberSuite.SDK.Interfaces.IExtensionService">
            <summary>
                Defines an extension service that can be called from
                MemberSuite to retrieve a value or trigger an action.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Interfaces.IExtensionService.Ping">
            <summary>
                Checks to see if the service is operational.
            </summary>
            <returns>True if operational.</returns>
            <remarks>
                MemberSuite will call this method when attempting to make sure the service
                works properly. At a base level, you should implement this method and return TRUE -
                but you can use this method to signal to MemberSuite that, for whatever reason, this
                service is out of commission.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Interfaces.IExtensionService.FireTrigger(MemberSuite.SDK.Types.TriggerType,System.String,System.String,MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Fires the trigger of an extension service
            </summary>
            <param name="typeOfTrigger">The type of trigger.</param>
            <param name="objectType">Type of the object.</param>
            <param name="context">The context.</param>
            <param name="prevObj">The prev obj.</param>
        </member>
        <member name="M:MemberSuite.SDK.Interfaces.IExtensionService.PopulateDropdownList(System.String,System.String,MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Populates a dropdown list based on the current record values
            </summary>
            <param name="recordType">Type of the record.</param>
            <param name="fieldName">The field name.</param>
            <param name="msoCurrentObjectValues">The mso current object values.</param>
            <returns></returns>
            <remarks>This extension service allows for powerful cascading dropdown and conditional population logic</remarks>
        </member>
        <member name="T:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest.EntitlementType">
            <summary>
                Gets or sets the type of the entitlement.
            </summary>
            <value>The type of the entitlement.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest.Context">
            <summary>
                Gets or sets the context.
            </summary>
            <value>The context.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest.AvailableFrom">
            <summary>
                Gets or sets the available from.
            </summary>
            <value>The available from.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest.AvailableUntil">
            <summary>
                Gets or sets the available until.
            </summary>
            <value>The available until.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.MassAssignEntitlementsJobManifest.Quantity">
            <summary>
                Gets or sets the quantity.
            </summary>
            <value>The quantity.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest.BatchName">
            <summary>
                Gets or sets the name of the batch.
            </summary>
            <value>The name of the batch.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest.IssueID">
            <summary>
                Gets or sets the issue ID.
            </summary>
            <value>The issue ID.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest.SubscriptionSearchToUseForFulfillment">
            <summary>
                Gets or sets the subscription search to use for fulfillment.
            </summary>
            <value>The subscription search to use for fulfillment.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionFulfillmentJobManifest.MembershipSearchToUseForFulfillment">
            <summary>
                Gets or sets the membership search to use for fulfillment.
            </summary>
            <value>The membership search to use for fulfillment.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Jobs.SubscriptionRenewalJobManifest">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionRenewalJobManifest.PublicationID">
            <summary>
                Gets or sets the publication ID.
            </summary>
            <value>The publication ID.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionRenewalJobManifest.SubscriptionSearchToUseForRenewal">
            <summary>
                Gets or sets the subscription search to use for renewal.
            </summary>
            <value>The subscription search to use for renewal.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionRenewalJobManifest.BatchName">
            <summary>
                Gets or sets the name of the batch.
            </summary>
            <value>The name of the batch.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Jobs.SubscriptionRenewalJobManifest.SendOutEmails">
            <summary>
                Gets or sets a value indicating whether [send out emails].
            </summary>
            <value><c>true</c> if [send out emails]; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition">
            <summary>
                Class CommandDefinition
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Name">
            <summary>
                Gets or sets the name of the command
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Class">
            <summary>
                Gets or sets the class.
            </summary>
            <value>The class.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ExpectedContextType">
            <summary>
                Gets or sets the expected type of the context.
            </summary>
            <value>The expected type of the context.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.AllowNullContext">
            <summary>
                Gets or sets a value indicating whether [allow null context].
            </summary>
            <value><c>true</c> if [allow null context]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.HelpTopic">
            <summary>
                The url of the help topic for this command
            </summary>
            <value>The redirect.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Redirect">
            <summary>
                Gets or sets the redirect.
            </summary>
            <value>The redirect.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.RedirectTarget">
            <summary>
                Gets or sets the redirect target.
            </summary>
            <value>The redirect target.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.TargetObject">
            <summary>
                Gets or sets the target object of the command, if applicable.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.AllowAnonymousUser">
            <summary>
                Gets or sets a value indicating whether [allow anonymous user].
            </summary>
            <value><c>true</c> if [allow anonymous user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.RequiresCommandSession">
            <summary>
                Gets or sets a value indicating whether [requires command session].
            </summary>
            <value><c>true</c> if [requires command session]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectsToPersistInCommandSession">
            <summary>
                Gets or sets the objects to persist in command session.
            </summary>
            <value>The objects to persist in command session.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.RequiresPermission">
            <summary>
                Gets or sets the requires permission.
            </summary>
            <value>The requires permission.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DisplayType">
            <summary>
                Gets or sets the display type.
            </summary>
            <value>The display type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectsToCreate">
            <summary>
                Gets or sets the objects to create.
            </summary>
            <value>The objects to create.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DataModelBindings">
            <summary>
                Gets or sets the data model bindings.
            </summary>
            <value>The data model bindings.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Searches">
            <summary>
                Gets or sets the searches.
            </summary>
            <value>The searches.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Workflow">
            <summary>
                Gets or sets the workflow.
            </summary>
            <value>The workflow.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.QuickSearches">
            <summary>
                Gets or sets the context-sensitive quick searches.
            </summary>
            <value>The quick searches.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Views">
            <summary>
                Gets or sets the views.
            </summary>
            <value>The views.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.Resources">
            <summary>
                Gets or sets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandDisplayType">
            <summary>
                Enum CommandDisplayType
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandDisplayType.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandDisplayType.PopupSmall">
            <summary>
                The popup small
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandDisplayType.PopupLarge">
            <summary>
                The popup large
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandDisplayType.PopupLargeExtraWide">
            <summary>
                The popup large extra wide
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToCreate">
            <summary>
                Class ObjectToCreate
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToCreate.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToCreate.NameInModel">
            <summary>
                Gets or sets the name in model.
            </summary>
            <value>The name in model.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToPersist">
            <summary>
                Class ObjectToPersist
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToPersist.NameInModel">
            <summary>
                Gets or sets the name in model.
            </summary>
            <value>The name in model.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.ObjectToPersist.Encrypt">
            <summary>
                Gets or sets a flag indicating if the object should be encrypted before persisted in the NoSQL db.
            </summary>
            <value><c>true</c> if encrypt; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflow">
            <summary>
                Defines how the view show response to state transitions
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflow.States">
            <summary>
                Gets or sets the states.
            </summary>
            <value>The states.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowState">
            <summary>
                Class CommandWorkflowState
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowState.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowState.Transitions">
            <summary>
                Gets or sets the transitions.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition">
            <summary>
                Class CommandWorkflowStateTransitition
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToState">
            <summary>
                Gets or sets to state.
            </summary>
            <value>To state.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommand">
            <summary>
                Gets or sets to command.
            </summary>
            <value>To command.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommandContext">
            <summary>
                Gets or sets to command context.
            </summary>
            <value>To command context.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommandArg1">
            <summary>
                Gets or sets to command arg1.
            </summary>
            <value>To command arg1.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommandArg2">
            <summary>
                Gets or sets to command arg2.
            </summary>
            <value>To command arg2.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommandArg3">
            <summary>
                Gets or sets to command arg3.
            </summary>
            <value>To command arg3.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.ToCommandArg4">
            <summary>
                Gets or sets to command arg4.
            </summary>
            <value>To command arg4.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.CommandWorkflowStateTransitition.TransferCommandSession">
            <summary>
                Gets or sets a value indicating whether [transfer command session].
            </summary>
            <value><c>true</c> if [transfer command session]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.CommandDefinition.DataModelBinding">
            <summary>
                Class DataModelBinding
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DataModelBinding.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DataModelBinding.Property">
            <summary>
                Gets or sets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.CommandDefinition.DataModelBinding.Expression">
            <summary>
                Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.PartialCommandDefinition">
            <summary>
                Represents a partial command definition - for use by the UI
                in deciding how and when to display commands.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.PartialCommandDefinition.Name">
            <summary>
                Gets or sets the name of the command
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.PartialCommandDefinition.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.PartialCommandDefinition.DisplayType">
            <summary>
                Gets or sets a value indicating whether this instance is popup.
            </summary>
            <value><c>true</c> if this instance is popup; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.ViewMetadata.AjaxTransitionMessage">
            <summary>
                If this is set, the transition is "long running" and an ajax message will appear
            </summary>
            <value>The ajax message.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.ViewMetadata.ControlSection.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.ViewMetadata.ControlSection.SearchesToDisplay">
            <summary>
                Gets or sets the searches to display.
            </summary>
            <value>The searches to display.</value>
            <remarks>This is particularly relevant for the Data 360 layout</remarks>
        </member>
        <member name="P:MemberSuite.SDK.Types.CommandShortcut.CommandSessionID">
            <summary>
                Gets or sets the command session ID.
            </summary>
            <value>The command session ID.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.FieldMetadataOverride">
            <summary>
                Class designed to override field metadata
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadataOverride.Override(MemberSuite.SDK.Types.FieldMetadata)">
            <summary>
                Overrides the specified original field.
            </summary>
            <param name="originalField">The original field.</param>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.DataType">
            <summary>
                Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.DisplayType">
            <summary>
                Gets or sets the display type.
            </summary>
            <value>The display type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.PickListEntries">
            <summary>
                If this is a pick list object, contains the entries that should be in the picklist
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.LookupTableID">
            <summary>
                Gets or sets the lookup table ID to pull acceptable values from.
            </summary>
            <value>The lookup table ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.ReferenceType">
            <summary>
                Gets or sets the type of the reference, if this is a reference type
            </summary>
            <value>The type of the reference.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadataOverride.Persisted">
            <summary>
                Specifies if this is a persisted column and therefore can be queried off the bast table or calculated field and therefore must be queried off the view
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.ControlMetadata.AcceptableValuesDataSource">
            <summary>
                Gets or sets the acceptable values data source.
            </summary>
            <value>The acceptable values data source.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.ControlMetadata.AcceptableValuesDataSourceExpression">
            <summary>
                Gets or sets the acceptable values data source expression.
            </summary>
            <value>The acceptable values data source expression.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Command.Views.SearchViewMetadata">
            <summary>
                Holds information about all of the widgets on a Search.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.Views.Data360ViewMetadata.AdditionalFields">
            <summary>
                Gets or sets the additional fields that should always be loaded
            </summary>
            <value>The additional fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.Views.Data360ViewMetadata.Searches">
            <summary>
                Gets or sets the searches for this 360 layout
            </summary>
            <value>The searches.</value>
        </member>
        <member name="M:MemberSuite.SDK.Manifests.Command.Views.DataEntryViewMetadata.FindControlByDataSourceExpression(System.String)">
            <summary>
                Checks to see if a particular field is used in this metadata
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Manifests.Command.Views.DataEntryViewMetadata.FindControlByID(System.String)">
            <summary>
                Checks to see if a particular field is used in this metadata
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Manifests.Command.Views.DataEntryViewMetadata.RemoveControlByID(System.String)">
            <summary>
                Checks to see if a particular field is used in this metadata
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Manifests.Command.Views.DataEntryViewMetadata.IsEmpty">
            <summary>
                Determines whether this instance is empty.
            </summary>
            <returns>
                <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.Views.TabularDataViewMetadata.ShowCheckboxes">
            <summary>
                Gets or sets a value indicating whether [show checkboxes].
            </summary>
            <value><c>true</c> if [show checkboxes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Command.Views.TabularDataViewMetadata.EditInstructionText">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Console.ConsoleMetadata">
            <summary>
                Describes all of the elements of the console
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Console.ConsoleMetadata.QuickSearches">
            <summary>
                Gets or sets the quick searches.
            </summary>
            <value>The quick searches.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Console.ConsoleMetadata.Tabs">
            <summary>
                Gets or sets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Console.QuickSearch">
            <summary>
                Defines available quick searches
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Console.QuickSearch.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Console.QuickSearch.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Console.QuickSearch.Columns">
            <summary>
                Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.CustomField.CustomFieldCreationPacket">
            <summary>
                Used to create a custom field and simultaneously update
                page layout containers
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Manifests.Searching.SearchManifest">
            <summary>
                Describes everything about running a particular search - for consumption by the UI.
                Takes a search specification and makes it apply to the current user/association.
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Manifests.Searching.SearchManifest.SearchType">
            <summary>
                Points to the search spec
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.SearchContext">
            <summary>
                Gets or sets the search context.
            </summary>
            <value>The search context.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.Fields">
            <summary>
                Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.DefaultSelectedFields">
            <summary>
                Gets or sets the default selected fields.
            </summary>
            <value>The default selected fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.DefaultSortFieds">
            <summary>
                Gets or sets the default sort fieds.
            </summary>
            <value>The default sort fieds.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.Module">
            <summary>
                Gets or sets the module that this search belongs to
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.OutputFormats">
            <summary>
                Gets or sets the output formats that are valid for this search
            </summary>
            <value>The output formats.</value>
        </member>
        <member name="P:MemberSuite.SDK.Manifests.Searching.SearchManifest.EmailBlastEligible">
            <summary>
                Gets or sets a value indicating whether this search to be used for an email blast.
            </summary>
            <value><c>true</c> if [email blast eligible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.CurrencyManager._convertUnicodeValuesToString(System.String)">
            <summary>
            Converts a set of comma separate unicode values to a tring
            </summary>
            <param name="sequenceOfValues">The sequence of values.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.CurrencyManager.IsValidCurrencyCode(System.String)">
            <summary>
            Determines whether the specified code is a valid currency code.
            </summary>
            <param name="code">The code.</param>
            <returns><c>true</c> if [is valid currency code] [the specified code]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.CurrencyManager.GetSymbolFor(System.String)">
            <summary>
            Gets the symbol for the specified currency code
            </summary>
            <param name="code">The code.</param>
            <returns>System.String.</returns>
            <exception cref="T:MemberSuite.SDK.MultiCurrency.InvalidCurrencyCodeException"></exception>
        </member>
        <member name="T:MemberSuite.SDK.Results.AddressValidationResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.ConciergeResult`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.ConciergeResult`1"/> class.
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ConciergeResult`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.ConciergeResult`1"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ConciergeResult`1.ResultValue">
            <summary>
                Gets or sets the result value.
            </summary>
            <value>The result value.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.AddressValidationResult.AddressValidationErrorMessage">
            <summary>
                Gets or sets the address validation error message.
            </summary>
            <value>The address validation error message.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.ColumnMetadataDictionary">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ColumnMetadataDictionary.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.ColumnMetadataDictionary"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.ColumnMetadataDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.ColumnMetadataDictionary"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.SearchWithFileOutputResult">
            <summary>
            
            </summary>
            <remarks></remarks>
            
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchWithFileOutputResult.Output">
            <summary>
            The search result file
            </summary>
            <value>The objects.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchWithFileOutputResult.TotalRowCount">
            <summary>
            Gets or sets the total row count, not the row count of rows in the table
            </summary>
            <value>The total row count.</value>
            <remarks>Very often the table will be a subset of the total rows - the row count
            allows you to know how many rows there are, actually</remarks>
        </member>
        <member name="T:MemberSuite.SDK.Searching.FlattenedSearchCriterion">
            <summary>
                Used EXCLUSIVELY to render a complex search operation tree
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.Currency.Copy(System.Decimal)">
            <summary>
            Creates another currency object with same code, but different amount
            </summary>
            <param name="amount">The amount.</param>
            <returns>Currency.</returns>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.Currency.Copy(System.String)">
            <summary>
            Creates another currency object with same amount, but different code
            </summary>
            <param name="amount">The amount.</param>
            <returns>Currency.</returns>
        </member>
        <member name="M:MemberSuite.SDK.MultiCurrency.Currency.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MemberSuite.SDK.MultiCurrency.Currency.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:MemberSuite.SDK.MultiCurrency.Currency.Code">
            <summary>
            Gets or sets the currency code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ElectronicPaymentManifest.SavePaymentMethod">
            <summary>
                If true, will save electronic payment info
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.MembershipCancellationOptions.Chapters">
            <summary>
            Gets or sets the linked registrations to include/exclude
             based on the CancelLinkedRegistrations behavior.
            </summary>
            <value>The linked registrations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MembershipCancellationOptions.Sections">
            <summary>
            Gets or sets the linked registrations to include/exclude
             based on the CancelLinkedRegistrations behavior.
            </summary>
            <value>The linked registrations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MembershipCancellationOptions.AddOns">
            <summary>
            Gets or sets the linked registrations to include/exclude
             based on the CancelLinkedRegistrations behavior.
            </summary>
            <value>The linked registrations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MembershipCancellationOptions.RefundInstructions">
            <summary>
            Gets or sets the refund instructions.
            </summary>
            <value>The refund instructions.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteObject2">
            <summary>
                This is essentially a MemberSuite object that is designed to be serializable
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject2.SafeGetValue(System.String)">
            <summary>
                Safely the get value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject2.SafeGetValue``1(System.String)">
            <summary>
                Safely the get value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns>``0.</returns>
        </member>
        <member name="T:MemberSuite.SDK.Results.MSQLResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.MSQLResult.SearchResult">
            <summary>
                Gets or sets the search result.
            </summary>
            <value>The search result.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.MSQLResult.SingleObject">
            <summary>
                Gets or sets the single object.
            </summary>
            <value>The single object.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.MSQLResult.ObjectSearchResult">
            <summary>
                Gets or sets the object search result.
            </summary>
            <value>The object search result.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.ObjectSearchResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ObjectSearchResult.Objects">
            <summary>
                Gets or sets the objects.
            </summary>
            <value>The objects.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.ObjectSearchResult.TotalRowCount">
            <summary>
                Gets or sets the total row count.
            </summary>
            <value>The total row count.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.QueryResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.QueryResult.Objects">
            <summary>
                Gets or sets the result objects.
            </summary>
            <value>The table.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.QueryResult.TotalObjectCount">
            <summary>
                Gets or sets the total object count, not the count of objects being returned
            </summary>
            <value>The total row count.</value>
            <remarks>
                Very often the objects being returned will be a subset of the total objects - the TotalObjectCount count
                allows you to know how many objects there are, actually
            </remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.Data360Packet">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.Data360Packet.HasMailMerge">
            <summary>
                Gets or sets a value indicating whether this instance has mail merge.
            </summary>
            <value><c>true</c> if this instance has mail merge; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.Data360Packet.ApplicableRelationshipTypes">
            <summary>
                Gets or sets the applicable relationship types.
            </summary>
            <value>The applicable relationship types.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.Data360Packet.ApplicableCustomObjects">
            <summary>
                Gets or sets the applicable custom objects.
            </summary>
            <value>The applicable custom objects.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.Data360Packet.IntegrationLinks">
            <summary>
                Gets or sets the integration links.
            </summary>
            <value>The integration links.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.Data360Packet.CanEmail">
            <summary>
                Gets or sets a value indicating whether this instance can email.
            </summary>
            <value><c>true</c> if this instance can email; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.LoginResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.SessionID">
            <summary>
                Gets or sets the session token.
            </summary>
            <value>The session token.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.User">
            <summary>
                Gets or sets the user.
            </summary>
            <value>The user.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.AccessibleEntities">
            <summary>
                Gets or sets the accessible entities, if this is a portal login.
            </summary>
            <value>The accessible entities.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.PortalUser">
            <summary>
                Gets or sets the portal user, if this was a portal login
            </summary>
            <value>The portal user.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.PortalEntity">
            <summary>
                Gets or sets the portal entity, if this was a portal login
            </summary>
            <value>The portal entity.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.Association">
            <summary>
                Gets or sets the association.
            </summary>
            <value>The association.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.ConsoleMetadata">
            <summary>
                Gets or sets the console metadata.
            </summary>
            <value>The console metadata.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.UserPreferences">
            <summary>
                Gets or sets the user preferences.
            </summary>
            <value>The user preferences.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.KeyChain">
            <summary>
                Gets or sets the key chain.
            </summary>
            <value>The key chain.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.AutoLoginHash">
            <summary>
                A token that you can use, along with the username, to automatically log in
                to the system
            </summary>
            <value>The auto login has.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.MemberSuiteVersion">
            <summary>
                Gets or sets the member suite version.
            </summary>
            <value>The member suite version.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.Customer">
            <summary>
                Gets or sets the customer.
            </summary>
            <value>The customer.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.LoginResult.AccessibleEntity">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.AccessibleEntity.ID">
            <summary>
                Gets or sets the ID.
            </summary>
            <value>The ID.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.AccessibleEntity.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.LoginResult.AccessibleEntity.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Results.SearchResult">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MemberSuite.SDK.Results.SearchResult.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Results.SearchResult"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.Table">
            <summary>
                Gets or sets the table.
            </summary>
            <value>The table.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.TotalRowCount">
            <summary>
                Gets or sets the total row count, not the row count of rows in the table
            </summary>
            <value>The total row count.</value>
            <remarks>
                Very often the table will be a subset of the total rows - the row count
                allows you to know how many rows there are, actually
            </remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.ColumnMetadata">
            <summary>
                Gets or sets the data types for the output fields, so that the
                user interface knows how to render them
            </summary>
            <value>The data types.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.ID">
            <summary>
                Gets or sets the ID.
            </summary>
            <value>The ID.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
            <remarks></remarks>
        </member>
        <member name="P:MemberSuite.SDK.Results.SearchResult.SearchManifest">
            <summary>
                Gets or sets the search manifest.
            </summary>
            <value>The search manifest.</value>
            <remarks></remarks>
        </member>
        <member name="T:MemberSuite.SDK.Searching.SearchOperation">
            <summary>
                Abstract class representing a logic operation
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Searching.SearchOperation._parent">
            <summary>
                Represents the parent group
            </summary>
            <remarks>
                It's CRITICAL that this is NOT serialized, otherwise it will cause exceptions at the WCF level
                as WCF's serializer tries to ready it for the wire
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperation.CalculateSearchHashCode">
            <summary>
                Calculates the search hint to be used if this search is to be cached
            </summary>
            <returns></returns>
            <remarks>
                We only want to include stuff that's relevant to the search strucutre -
                that's why ValuesToOperateOn isn't included!
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperation.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.Parent">
            <summary>
                Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.FieldName">
            <summary>
                Gets or sets the field to seach on
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.ValuesToOperateOn">
            <summary>
                Gets or sets the values to operate on.
            </summary>
            <value>The values to operate on.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.IsNegative">
            <summary>
                Gets or sets a value indicating whether this instance is negative.
            </summary>
            <value>
                <c>true</c> if this instance is negative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.SupportsParameterization">
            <summary>
                Gets a value indicating whether this operation can be parameterized
            </summary>
            <value>
                <c>true</c> if [supports parameterization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperation.EnableParameterization">
            <summary>
                Gets or sets a value indicating whether this operation is enabled for parameterization.
            </summary>
            <value>
                <c>true</c> if [enable parameterization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.EndsWithOneOfTheFollowing.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.StartsWithOneOfTheFollowing.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.EndsWith.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.StartsWith.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="T:MemberSuite.SDK.Types.EntitlementReport">
            <summary>
                Represents a summary for a specific entity's entitlements for a given type/context.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.PaymentProcessorType">
            <summary>
                Payment processor type
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.SupportsClientSideEncryption">
            <summary>
                True if supports client side encryption.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.ClientID">
            <summary>
                Our internal database clientID corresponding to CustomerID
                Required by client side tokenization.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.EndpointUri">
            <summary>
                The priority payments endpoint address, will change from environment to environment...
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.LoggingUri">
            <summary>
            The destination URI where our JS logic should log information about the transaction to.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.LoggingPort">
            <summary>
            The destination port where our JS logic should log information about the transaction to.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.CustomerType">
            <summary>
            Customer Type..priority payment API requires a customer type to be sent.. currently they support two types (Person/Company), which matches our Individual/Organization
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.FirstName">
            <summary>
            Customer's First Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.LastName">
            <summary>
            Customer's Last Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.EmailAddress">
            <summary>
            Customer's Email Address
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.Name">
            <summary>
            Customer's Name (this is especially needed for organizations
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.AddressName">
            <summary>
            Customer's preferred Address Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.Address1">
            <summary>
            Customer's  preferred Address  Address1
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.Address2">
            <summary>
            Customer's  preferred Address  Address2
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.City">
            <summary>
            Customer's preferred Address City
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.State">
            <summary>
            Customer's  preferred Address State
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorSettings.Zip">
            <summary>
            Customer's  preferred Address Zip
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.PriorityApiSettings">
            <summary>
            The purpose of the following class is ONLY compatibility with custom portals
            As soon as new payment processing code will be ported to custom portals, this class has to be removed.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.IsPreferredConfigured">
            <summary>
                The tokenized mapping to the saved credit card.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.CustomerID">
            <summary>
                The Priority API ID which maps directly to the Membersuite entity object such as Individual or Organization.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.AccessToken">
            <summary>
                The tokenized mapping to the saved credit card.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.EndpointUri">
            <summary>
                The priority payments endpoint address, will change from environment to environment...
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.LoggingUri">
            <summary>
            The destination URI where our JS logic should log information about the transaction to.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.LoggingPort">
            <summary>
            The destination port where our JS logic should log information about the transaction to.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.CustomerType">
            <summary>
            Customer Type..priority payment API requires a customer type to be sent.. currently they support two types (Person/Company), which matches our Individual/Organization
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.FirstName">
            <summary>
            Customer's First Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.LastName">
            <summary>
            Customer's Last Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.EmailAddress">
            <summary>
            Customer's Email Address
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.Name">
            <summary>
            Customer's Name (this is especially needed for organizations
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.AddressName">
            <summary>
            Customer's preferred Address Name
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.Address1">
            <summary>
            Customer's  preferred Address  Address1
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.Address2">
            <summary>
            Customer's  preferred Address  Address2
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.City">
            <summary>
            Customer's preferred Address City
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.State">
            <summary>
            Customer's  preferred Address State
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PriorityApiSettings.Zip">
            <summary>
            Customer's  preferred Address Zip
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.RegistrationCancellationOptions.LinkedRegistrations">
            <summary>
            Gets or sets the linked registrations to include/exclude
             based on the CancelLinkedRegistrations behavior.
            </summary>
            <value>The linked registrations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.RegistrationCancellationOptions.Merchandise">
            <summary>
            Gets or sets the linked merchandise to include/exclude
             based on the Cancel Merchandise behavior.
            </summary>
            <value>The linked registrations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.RegistrationCancellationOptions.RefundInstructions">
            <summary>
            Gets or sets the refund instructions.
            </summary>
            <value>The refund instructions.</value>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.EmbeddedResource">
            <summary>
                Used for retrieveing embedded resources in an assembly
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Utilities.EmbeddedResource._resourceCache">
            <summary>
                Cache so we don't have to load resources multiple times
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.LoadAsXml(System.String,System.Reflection.Assembly)">
            <summary>
                Loads an embedded resource as XML.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="assembly">The calling assembly (optional)</param>
            <returns>An XmlDocument, or null if the resource isn't found</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.LoadAsXmlLinq(System.String)">
            <summary>
                Loads an embedded resource as XML.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns>An XmlDocument, or null if the resource isn't found</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.LoadAsXmlLinq(System.String,System.Reflection.Assembly)">
            <summary>
                Loads an embedded resource as XML.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="callingAssembly"></param>
            <returns>An XmlDocument, or null if the resource isn't found</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.LoadAsString(System.String)">
            <summary>
                Loads as string.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.LoadAsString(System.String,System.Reflection.Assembly)">
            <summary>
                Loads as string.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="callingAssembly">The calling assembly.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.FindByExtension(System.String)">
            <summary>
                Finds all embedded resources in the assembly using the extension
            </summary>
            <param name="extension">The extension, including the starting period (.)</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.EmbeddedResource.FindByExtension(System.Reflection.Assembly,System.String)">
            <summary>
                Finds all embedded resources in the assembly using the extension
            </summary>
            <param name="extension">The extension, including the starting period (.)</param>
            <returns></returns>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.UIOptimizer">
            <summary>
                Methods designed to optimize the 360 screen. They live here because the JES needs them to warm up.
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Utilities.RegularExpressions.DynamicImageDetectorRegex">
            <summary>
                Regexes for parsing request path.  Uses [A-Fa-f0-9] for GUID characters instead of \w because we want to be
                very particular with the path and don't want to match _
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.SearchUtilities.SearchAll(MemberSuite.SDK.Concierge.IConciergeAPIService,MemberSuite.SDK.Searching.Search)">
            <summary>
                Makes the necessary calls to the API to get all search results,
                since the API restricts the number of results that can come back in a search
            </summary>
            <param name="api">The API.</param>
            <param name="searchToRun">The search to run.</param>
            <returns></returns>
            <remarks>
                Use this wisely, as the resulting data table will be in memory and could grow large
                depending on the search
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.Contains.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.ContainsOneOfTheFollowing.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.Equals.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.IsBetween.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.IsBlank.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.IsGreaterThan.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.IsGreaterThanOrEqualTo.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Operations.IsOneOfTheFollowing.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="T:MemberSuite.SDK.Searching.Operations.SpecialOperation">
            <summary>
                Represents an operation that is specific to a search - that is, handled by a
                SearchRunner directly. Example - Has Register For Event, Was Member In '{0}' year, etc,
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Operations.WhereClause.Clause">
            <summary>
                Gets or sets the clause.
            </summary>
            <value>The clause.</value>
        </member>
        <member name="T:MemberSuite.SDK.Searching.Search">
            <summary>
                Encapsulates all of the elements of a MemberSuite "search" - used by the
                search engine to execute a search upon a search type.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.Accept(MemberSuite.SDK.Searching.ISearchObjectVisitor)">
            <summary>
                Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <remarks>
                We usse this for operations that require navigation the search operation tree, but which
                are too sensitive to be exposed to the User Interface layer - most notably generation of SQL.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.RemoveOperation(System.String)">
            <summary>
                Removes the operation.
            </summary>
            <param name="operationID">The operation ID.</param>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.FindOperation(MemberSuite.SDK.Searching.SearchOperation)">
            <summary>
                Recursively finds the operation.
            </summary>
            <param name="so">The so.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.FindOperation(System.String)">
            <summary>
                Recursively finds the operation.
            </summary>
            <param name="so">The so.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.GetParameterizedOperations">
            <summary>
                Recursively gets the parameterized operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOperationGroup.InjectCriteriaAndReformatGroupIfNecessary(MemberSuite.SDK.Searching.SearchOperationGroupType,MemberSuite.SDK.Searching.SearchOperation)">
            <summary>
                Adds the specified operation to this group. If the group's type (and/or) is different than the groupType
                parameter, a new group is spawned and added to this one,
            </summary>
            <param name="groupType"></param>
            <param name="operationToAdd"></param>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperationGroup.Criteria">
            <summary>
                Gets or sets the operations.
            </summary>
            <value>The operations.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOperationGroup.GroupType">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Search.FromManifest(MemberSuite.SDK.Manifests.Searching.SearchManifest)">
            <summary>
                Generates a default search based on the manifest.
            </summary>
            <param name="searchManifest">The search manifest.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Search.ParseOrderBy(System.String)">
            <summary>
                Takes an order by string (i.e., FirstName DESC, ID) and
                converts it to sortcolumns
            </summary>
            <param name="orderBy">The order by.</param>
        </member>
        <member name="M:MemberSuite.SDK.Searching.Search.Clone">
            <summary>
                Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.Type">
            <summary>
                Gets or sets the type of search - i.e., Individual, Events, etc.
            </summary>
            <value>The type.</value>
            <remarks>The type must match up with a known Search Specification.</remarks>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.Module">
            <summary>
                INTERNAL USE ONLY - gets or set a search hint that allows the search engine to bypass
                search construction and metadata retrieval
            </summary>
            <value>The search hint.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.OutputColumns">
            <summary>
                Gets or sets the output columns.
            </summary>
            <value>The output columns.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.SortColumns">
            <summary>
                Gets or sets the sort fields.
            </summary>
            <value>The sort fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.OutputFormat">
            <summary>
                Gets or sets the type of the output.
            </summary>
            <value>The type of the output.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.TopN">
            <summary>
                Gets or sets the top N records to get.
            </summary>
            <value>The top number of rows to retrieve.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.Search.Override">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Searching.Search"/> is override.
                For one-clicks in 360 metadata, this forces the system to use the specified search
            </summary>
            <value>
                <c>true</c> if override; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MemberSuite.SDK.Searching.SearchBuilder">
            <summary>
                Used to construct a search object
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchBuilder.CanCloseParenthesis">
            <summary>
                Gets a value indicating whether this instance can close parenthesis.
            </summary>
            <value>
                <c>true</c> if this instance can close parenthesis; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchBuilder.Search">
            <summary>
                Gets the search.
            </summary>
            <value>The search.</value>
        </member>
        <member name="T:MemberSuite.SDK.Searching.SearchOutputColumn">
            <summary>
                Specified output options for a search
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchOutputColumn.CalculateSearchHint">
            <summary>
                Calculates the search hint
            </summary>
            <returns></returns>
            <remarks> These are items in the class that change how the resultant query is run.</remarks>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOutputColumn.Name">
            <summary>
                Gets or sets the name of the output field
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOutputColumn.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchOutputColumn.AggregateFunction">
            <summary>
                Gets or sets the aggregate function.
            </summary>
            <value>The aggregate function.</value>
        </member>
        <member name="M:MemberSuite.SDK.Searching.SearchSortColumn.CalculateSearchHint">
            <summary>
                Calculates the search hint
            </summary>
            <returns></returns>
            <remarks> These are items in the class that change how the resultant query is run.</remarks>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchSortColumn.Name">
            <summary>
                Gets or sets the name of the field
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Searching.SearchSortColumn.IsDescending">
            <summary>
                Gets or sets a value indicating whether this instance is descending.
            </summary>
            <value>
                <c>true</c> if this instance is descending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MemberSuite.SDK.Types.Address">
            <summary>
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.Address.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current
                <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns>
                true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />;
                otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
                The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.Address.ToHtmlString">
            <summary>
                Generates an HTMl friendly address
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.Address.ToNonHtmlString">
            <summary>
                Generates an HTMl friendly address
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.Address.GetValues">
            <summary>
                Gets the values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.Company">
            <summary>
                Gets or sets the company, if this address belongs to an individual.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.Line1">
            <summary>
                Gets or sets Line 1 of the address
            </summary>
            <value>The line1.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.Line2">
            <summary>
                Gets or sets Line 2 of the address
            </summary>
            <value>The line2.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.City">
            <summary>
                Gets or sets Line 3 of the address
            </summary>
            <value>The line3.</value>
            <summary>
                Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.State">
            <summary>
                Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.PostalCode">
            <summary>
                Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.Country">
            <summary>
                Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.CongressionalDistrict">
            <summary>
                Gets or sets the congressional district.
            </summary>
            <value>The congressional district.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.CarrierRoute">
            <summary>
                Gets or sets the carrier route.
            </summary>
            <value>The carrier route.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.DeliveryPointCode">
            <summary>
                Gets or sets the delivery point code.
            </summary>
            <value>The delivery point code.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.DeliveryPointCheckDigit">
            <summary>
                Gets or sets the delivery point check digit.
            </summary>
            <value>The delivery point check digit.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.GeocodeLat">
            <summary>
                Gets or sets the Geocode Lat value.
            </summary>
            <value>The Geocode Lat value.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.GeocodeLong">
            <summary>
                Gets or sets the Geocode Long value.
            </summary>
            <value>The Geocode Long value.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.Address.LastGeocodeDate">
            <summary>
                Gets or sets the date address was last geocoded.
            </summary>
            <value>The date address was last geocoded.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReport.IncompleteProducts">
            <summary>
                Gets or sets the missing revenue L Accouns
            </summary>
            <value>The missing revenue G ls.</value>
            <remarks>These are a list of product IDs with missing</remarks>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReport.MissingDueToDueFromEntries">
            <summary>
                Gets or sets the missing due to due from entries.
            </summary>
            <value>The missing due to due from entries.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReport.IncompleteBusinessUnits">
            <summary>
                Gets or sets the incomplete business units.
            </summary>
            <value>The incomplete business units.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReport.ProFormaInvoiceCount">
            <summary>
                Gets or sets the pro forma invoice count.
            </summary>
            <value>The pro forma invoice count.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.BatchReadinessReportMissingDueToDueFrom">
            <summary>
                Represents missing (but necessary) due to/due from entries
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportMissingDueToDueFrom.FromBusinessUnitID">
            <summary>
                Gets or sets from business unit.
            </summary>
            <value>From business unit.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportMissingDueToDueFrom.FromBusinessUnitName">
            <summary>
                Gets or sets the name of from business unit.
            </summary>
            <value>The name of from business unit.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportMissingDueToDueFrom.ToBusinessUnit">
            <summary>
                Gets or sets to business unit.
            </summary>
            <value>To business unit.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportMissingDueToDueFrom.ToBusinessUnitName">
            <summary>
                Gets or sets the name of to business unit.
            </summary>
            <value>The name of to business unit.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportIncompleteBusinessUnit.BusinessUnitID">
            <summary>
                Gets or sets the business unit ID.
            </summary>
            <value>The business unit ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.BatchReadinessReportIncompleteBusinessUnit.BusinessUnitName">
            <summary>
                Gets or sets the name of the business unit.
            </summary>
            <value>The name of the business unit.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.ClassMetadataOverride">
            <summary>
                Class ClassMetadataOverride
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.ClassMetadataOverride.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.ClassMetadataOverride"/> class.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Module">
            <summary>
                Gets or sets the module that this class belongs to
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Fields">
            <summary>
                Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Createable">
            <summary>
                Gets or sets a value indicating whether this is createable.
            </summary>
            <value><c>true</c> if createable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Updateable">
            <summary>
                Gets or sets a value indicating whether this is updateable.
            </summary>
            <value><c>true</c> if updateable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Deletable">
            <summary>
                Gets or sets a value indicating whether this is deletable.
            </summary>
            <value><c>true</c> if deletable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.LabelPlural">
            <summary>
                Gets or sets the label plural.
            </summary>
            <value>The label plural.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.IsSecurable">
            <summary>
                Gets or sets a value indicating whether this instance is securable.
            </summary>
            <value><c>null</c> if [is securable] contains no value, <c>true</c> if [is securable]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.ValidationRules">
            <summary>
                Gets or sets the validation rules.
            </summary>
            <value>The validation rules.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadataOverride.FieldCalculationRules">
            <summary>
                Gets or sets the field calculation rules.
            </summary>
            <value>The field calculation rules.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.CommandPreferences">
            <summary>
                Represents command "state" that can be persisted and saved
            </summary>
            <remarks>
                Note that the value is always a string - not everything can
                be serialized via a WCF service, and making it typeof(object) increases
                the chance a developer somehwere will accidentally dup something in the preferences
                that can't be serialized and spend 2 hours hunting down a bug.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Types.CommandPreferences.Clean">
            <summary>
                Marks this instance as being clean, meaning that the preferences have been persisted
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.CompetitionEntryInformation">
            <summary>
                Packet of information returned to the client about an Entities options for entering a competition
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteObject">
            <summary>
                Represents a set of name/value pairs that represent an object
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.MemberSuiteObject"/> class.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.#ctor(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.MemberSuiteObject"/> class,
                using the fields in the absorbing object
            </summary>
            <param name="msObjectToAbsorb">The ms object to absorb.</param>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetPropertyOrFieldAccessor(System.String)">
            <summary>
                Gets the property or field accessor.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns>IValueAccessor.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject._absorb(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                _absorbs the specified ms object to absorb.
            </summary>
            <param name="msObjectToAbsorb">The ms object to absorb.</param>
            <exception cref="T:MemberSuite.SDK.Types.SDKException">MemberSuite Object of type '{0}' cannot absorb an object of type '{1}'</exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.SafeGetValue(System.String)">
            <summary>
                Safely the get value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.SafeGetValue``1(System.String)">
            <summary>
                Safely the get value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.ExistsInDatabase">
            <summary>
                Checks to see whether the domain object represented by this member suite object exists in the database
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.FromClassMetadata(MemberSuite.SDK.Types.ClassMetadata)">
            <summary>
                Froms the class metadata.
            </summary>
            <param name="classMetadata">The class metadata.</param>
            <returns>MemberSuiteObject.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.FromDataRow(System.Data.DataRow)">
            <summary>
                Froms the data row.
            </summary>
            <param name="dataRow">The data row.</param>
            <returns>MemberSuiteObject.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.getValidDefaultValue(MemberSuite.SDK.Types.FieldDataType,System.Object)">
            <summary>
                Gets the valid default value - checking to make sure that a valid default value is specified for
                the data type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="defaultVal">The default val.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.IsSubclassOf(System.String)">
            <summary>
                Determines whether [is subclass of] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is subclass of] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.Clone">
            <summary>
                Clones this instance.
            </summary>
            <returns>MemberSuiteObject.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.ConvertToMemberSuiteObject(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Takes an object that is of a type derived from MS Object and converts it to a pure membersuite object
            </summary>
            <param name="memberSuiteObject">The member suite object.</param>
            <returns>MemberSuiteObject.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.ResolveExpression(System.String)">
            <summary>
                Resolves the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.CanAdd(System.Object)">
            <summary>
                Determines whether this instance can add the specified object
            </summary>
            <param name="newValue">The new value.</param>
            <returns><c>true</c> if this instance can add the specified o; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.SetValue(System.String,System.Object)">
            <summary>
                Sets the value, swallowing any exceptions.
            </summary>
            <param name="expression">The expression.</param>
            <param name="newValue">The new value.</param>
            <returns>True if value was set successfully</returns>
            <exception cref="T:MemberSuite.SDK.Types.SDKException">Unable to add type '{0}' to a MemberSuite object - it cannot be serialized.</exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.#cctor">
            <summary>
                Initializes static members of the <see cref="T:MemberSuite.SDK.Types.MemberSuiteObject"/> class.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.initialize">
            <summary>
                Initializes this instance.
            </summary>
            <exception cref="T:System.ApplicationException">Type specified multiple times:  + t</exception>
        </member>
        <member name="F:MemberSuite.SDK.Types.MemberSuiteObject._allowedTypeCache">
            <summary>
                The _allowed type cache
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.registerKnownTypes">
            <summary>
                Registers the known types.
            </summary>
            <returns>List{Type}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetAttributes">
            <summary>
                Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetClassName">
            <summary>
                Returns the class name of this instance of a component.
            </summary>
            <returns>The class name of the object, or null if the class does not have a name.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetComponentName">
            <summary>
                Returns the name of this instance of a component.
            </summary>
            <returns>The name of the object, or null if the object does not have a name.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetConverter">
            <summary>
                Returns a type converter for this instance of a component.
            </summary>
            <returns>
                A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there
                is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetDefaultEvent">
            <summary>
                Returns the default event for this instance of a component.
            </summary>
            <returns>
                An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object,
                or null if this object does not have events.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetDefaultProperty">
            <summary>
                Returns the default property for this instance of a component.
            </summary>
            <returns>
                A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this
                object, or null if this object does not have properties.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetEditor(System.Type)">
            <summary>
                Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
                An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the
                editor cannot be found.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetEvents(System.Attribute[])">
            <summary>
                Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
                An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for
                this component instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetEvents">
            <summary>
                Returns the events for this instance of a component.
            </summary>
            <returns>
                An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this
                component instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetProperties(System.Attribute[])">
            <summary>
                Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
                A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties
                for this component instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetProperties">
            <summary>
                Returns the properties for this instance of a component.
            </summary>
            <returns>
                A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this
                component instance.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
                Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">
                A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner
                is to be found.
            </param>
            <returns>An <see cref="T:System.Object"/> that represents the owner of the specified property.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.Fields">
            <summary>
                Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.ClassType">
            <summary>
                Gets or sets the type of Member Suite object that this represents
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.ParentTypes">
            <summary>
                Gets or sets the parent types.
            </summary>
            <value>The parent types.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object"/> with the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor">
            <summary>
                Class MemberSuiteObjectFieldDescriptor
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor._field">
            <summary>
                The _field
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor"/> class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.CanResetValue(System.Object)">
            <summary>
                When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.GetValue(System.Object)">
            <summary>
                When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.ResetValue(System.Object)">
            <summary>
                When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.SetValue(System.Object,System.Object)">
            <summary>
                When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
                When overridden in a derived class, determines a value indicating whether the value of this property needs to be
                persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>true if the property should be persisted; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.ComponentType">
            <summary>
                When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value>The type of the component.</value>
            <returns>
                A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the
                <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or
                <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are
                invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.IsReadOnly">
            <summary>
                When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObject.MemberSuiteObjectFieldDescriptor.PropertyType">
            <summary>
                When overridden in a derived class, gets the type of the property.
            </summary>
            <value>The type of the property.</value>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>A <see cref="T:System.Type"/> that represents the type of the property.</returns>
        </member>
        <member name="T:MemberSuite.SDK.Types.EmailTemplate">
            <summary>
                Represents a template for an email that can be sent
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.EmailTemplate.Disabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.EmailTemplate"/> is disabled.
            </summary>
            <value><c>true</c> if disable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.PortalAccessibility">
            <summary>
                Determines whether a field can be edited or seen in the portal
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.PortalAccessibility.Full">
            <summary>
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.PortalAccessibility.ReadOnly">
            <summary>
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.PortalAccessibility.None">
            <summary>
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSDemographicPaymentCodeType">
            <summary>
                Used to describe the nature of a payment or status of a pledge
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSEducationDeliveryMethodType">
            <summary>
                How the course was delivered
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSEducationPaymentCodeType">
            <summary>
                The nature of the payment
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSEducationTestMailingAddressType">
            <summary>
                Where the member prefers test results to be sent
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSFinancialContributionType">
            <summary>
                Used for PAC contributions only
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSFinancialSource">
            <summary>
                The source of this transaction. The code EC is reserved for Financial records that are
                filled in automatically by the NAR EC Invoicing module. All other records should have
                XT in this field.
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberPreferredFax">
            <summary>
                Where the member prefers to receive faxes
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberAddressType">
            <summary>
                Where the member would prefer to receive mail
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberPreferredPhone">
            <summary>
                Member’s preferred phone
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberStatus">
            <summary>
                Member status
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberSupplementalStatus">
            <summary>
                Member status
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSMemberType">
            <summary>
                Type of membership
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSOfficeBranchType">
            <summary>
                Code to indicate the office branch location
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.NRDSOfficeStatus">
            <summary>
                Status of the office record
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.CreditMemoPaymentOverageBehavior">
            <summary>
            Determines what happens if a credit memo is apply to 
            an invoice and there's extra payments/money left over
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.CreditType.Payment">
            <summary>
            The credit is acting on a payment
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.CreditType.Overpayment">
            <summary>
            The credit was generated as a result of an overpayment
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.EventManifest">
            <summary>
                A manifest of everything needed to generate a registration form for an event
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.EventManifestSession.DefaultFee">
            <summary>
                Gets or sets the fee to use for registration.
            </summary>
            <value>The fee to use for registration.</value>
            <remarks>
                If this is set, then you should use THIS fee when a person registered. If there
                are multiple available fees, then this value will be null and you should allow the user to
                select.
            </remarks>
        </member>
        <member name="P:MemberSuite.SDK.Types.EventManifestSession.Fees">
            <summary>
                Gets or sets the fees.
            </summary>
            <value>The fees.</value>
            This is a list of all fees available for this session
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldCalculationRule.Expression">
            <summary>
                Gets or sets the expression used the set the value of the target field
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldCalculationRule.Criteria">
            <summary>
                Gets or sets the optional criteria used to determine if the expression is true
            </summary>
            <value>The criteria.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldCalculationRule.SkipIfTargetFieldIsSet">
            <summary>
                Gets or sets a value indicating whether [skip if target field is set].
            </summary>
            <value>
                <c>true</c> if [skip if target field is set]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MemberSuite.SDK.Types.FieldMetadata">
            <summary>
                Represents everything about a "field", or in the .NET world, a property, on
                an object
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.FieldMetadata._declaringType">
            <summary>
                The _declaring type
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.FieldMetadata"/> class.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.Clone">
            <summary>
                Makes a copy of this object
            </summary>
            <returns>FieldMetadata.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.Parse(System.String)">
            <summary>
                Parses the specified list of pick list entries.
            </summary>
            <param name="listOfPickListEntries">The list of pick list entries.</param>
            <returns>List{PickListEntry}.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.ToPickListEntriesString">
            <summary>
                Converts a list of pick list entries to a string
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.GetTypeFor(MemberSuite.SDK.Types.FieldDataType)">
            <summary>
                Gets the type for.
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.FieldMetadata.GetEmptyValueFor(MemberSuite.SDK.Types.FieldDataType)">
            <summary>
                Gets an "empty" value for a specific data type
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.PortalPrompt">
            <summary>
                Gets or sets the portal prompt.
            </summary>
            <value>The portal prompt.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.HelpText">
            <summary>
                Gets or sets the help text.
            </summary>
            <value>The help text.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Namespace">
            <summary>
                Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.PortalAccessibility">
            <summary>
                Gets or sets the portal accessibility.
            </summary>
            <value>The portal accessibility.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Type">
            <summary>
                Gets or sets the type of field
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DataType">
            <summary>
                Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DisplayType">
            <summary>
                Gets or sets the display type.
            </summary>
            <value>The display type.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.ColumnWidth">
            <summary>
                Gets or sets the width of the column.
            </summary>
            <value>The width of the column.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.NullValueLabel">
            <summary>
                Gets or sets the null value label.
            </summary>
            <value>The null value label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Description">
            <summary>
                Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DeclaringType">
            <summary>
                Gets or sets the type that this field is declared on
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.LookupTableID">
            <summary>
                Gets or sets the lookup table ID.
            </summary>
            <value>The lookup table ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.ExtensionServiceID">
            <summary>
                Gets or sets the extension service ID that will populate this record (dropdowns/ajax combobox only)
            </summary>
            <value>The extension service ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.RelationshipTypeID">
            <summary>
                Gets or sets the relationship type ID.
            </summary>
            <value>The relationship type ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Sortable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.FieldMetadata"/> is sortable.
            </summary>
            <value><c>true</c> if sortable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Displayable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.FieldMetadata"/> is displayable.
            </summary>
            <value><c>true</c> if displayable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DefaultValue">
            <summary>
                Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.MinimumValue">
            <summary>
                Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.MaximumValue">
            <summary>
                Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.PickListEntries">
            <summary>
                If this is a pick list object, contains the entries that should be in the picklist
            </summary>
            <value>The pick list entries.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.ReferenceType">
            <summary>
                Gets or sets the type of the reference, if this is a reference type
            </summary>
            <value>The type of the reference.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.IsRequired">
            <summary>
                Gets or sets a value indicating whether this instance is required.
            </summary>
            <value><c>true</c> if this instance is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.IsRequiredInPortal">
            <summary>
                Gets or sets a value indicating whether this instance is required in portal.
            </summary>
            <value><c>true</c> if this instance is required in portal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.IsSealed">
            <summary>
                Gets or sets a value indicating whether this instance is sealed.
            </summary>
            <value><c>true</c> if this instance is sealed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.IsReadOnly">
            <summary>
                Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.AccessLevel">
            <summary>
                Gets or sets the access level.
            </summary>
            <value>The access level.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DoNotDescribe">
            <summary>
                Gets or sets a value indicating whether [do not describe].
            </summary>
            <value><c>true</c> if [do not describe]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.IsOverriden">
            <summary>
                Gets or sets a value indicating whether this instance is overriden.
            </summary>
            <value><c>true</c> if this instance is overriden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.CustomFieldID">
            <summary>
                Gets or sets the custom field ID.
            </summary>
            <value>The custom field ID.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.ReferenceTypeContext">
            <summary>
                Gets or sets the reference type context.
            </summary>
            <value>The reference type context.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.MetadataType">
            <summary>
                Gets or sets the type of the metadata.
            </summary>
            <value>The type of the metadata.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.DoNotConvertTimeToUTC">
            <summary>
                Gets or sets a value indicating whether [do not convert time to UTC].
            </summary>
            <value><c>true</c> if [do not convert time to UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.Precision">
            <summary>
                The number of digits available after the decimal point.  Applies to fields with a FieldDataType of Decimal only.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FieldMetadata.SuppressDefaultValue">
            <summary>
                Suppresses default value assignment
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.PortalInformation">
            <summary>
                Packet of information returned to the client about a Portal
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PreProcessedOrderPacket.FinalizedOrder">
            <summary>
                Gets or sets the finalized order.
            </summary>
            <value>The finalized order.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.PreProcessedOrderPacket.CustomerCanPayLater">
            <summary>
                Gets or sets a value indicating whether [customer can pay later].
            </summary>
            <value>
                <c>true</c> if [customer can pay later]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.PreProcessedOrderPacket.AmountDueNow">
            <summary>
                Gets or sets the amount due now.
            </summary>
            <value>The amount due now.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.PreProcessedOrderPacket.ProductDemographics">
            <summary>
                Gets or sets the product demographics for the products in this order
            </summary>
            <value>The product demographics.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.PreProcessedOrderPacket.FutureBillings">
            <summary>
                Gets or sets the future billings.
            </summary>
            <value>The future billings.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.KeyChain">
            <summary>
                Defines all of the elements of the system that a particular
                user or security role can access.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.KeyChain.AbsorbPermissionsFrom(MemberSuite.SDK.Types.KeyChain)">
            <summary>
                Absorbs the permissions from another keychain.
            </summary>
            <param name="keyChain">The key chain.</param>
        </member>
        <member name="P:MemberSuite.SDK.Types.KeyChain.Commands">
            <summary>
                Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.KeyChain.Reports">
            <summary>
                Gets or sets the reports.
            </summary>
            <value>The reports.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.KeyChain.Tabs">
            <summary>
                Gets or sets the tabs that people in this role can see
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.KeyChain.RecordTypes">
            <summary>
                Gets or sets the record types that
                can be accessed
            </summary>
            <value>The record types.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteFile">
            <summary>
                Represents a serializable, transportable file structure
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteObjectExtensions">
            <summary>
                Class MemberSuiteObjectExtensions
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectExtensions.ConvertTo``1(System.Collections.Generic.List{MemberSuite.SDK.Types.MemberSuiteObject})">
            <summary>
                Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listOfMemberSuiteObjects">The list of member suite objects.</param>
            <returns>List{``0}.</returns>
            <exception cref="T:System.Exception">no contructor found for  + typeof(T).FullName</exception>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectExtensions.ConvertTo``1(MemberSuite.SDK.Types.MemberSuiteObject)">
            <summary>
                Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mso">The mso.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectExtensions.ConvertTo(MemberSuite.SDK.Types.MemberSuiteObject,System.Type)">
            <summary>
                Converts to.
            </summary>
            <param name="mso">The mso.</param>
            <param name="t">The t.</param>
            <returns>MemberSuiteObject.</returns>
            <exception cref="T:System.Exception">no contructor found for  + t.FullName</exception>
        </member>
        <member name="T:MemberSuite.SDK.Types.ClassMetadata">
            <summary>
                Holds all of the information describing an object
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.ClassMetadata.Clone">
            <summary>
                Makes a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ClassMetadata.GenerateFieldDictionary">
            <summary>
                Generates the field dictionary, for convience applications
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.LabelPlural">
            <summary>
                Gets or sets the label plural.
            </summary>
            <value>The label plural.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Module">
            <summary>
                Gets or sets the module that this class belongs to
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Fields">
            <summary>
                Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Createable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.ClassMetadata"/> is createable.
            </summary>
            <value><c>true</c> if createable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Updateable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.ClassMetadata"/> is updateable.
            </summary>
            <value><c>true</c> if updateable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.Deletable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:MemberSuite.SDK.Types.ClassMetadata"/> is deletable.
            </summary>
            <value><c>true</c> if deletable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.ParentTypes">
            <summary>
                Gets or sets the parent types.
            </summary>
            <value>The parent types.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.IsAbstract">
            <summary>
                Gets or sets a value indicating whether this instance is abstract.
            </summary>
            <value>
                <c>true</c> if this instance is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.IsSecurable">
            <summary>
                Gets or sets a value indicating whether this instance is securable.
            </summary>
            <value>
                <c>true</c> if this instance is securable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.ClassMetadata.CanBeCachedForEntireAssociation">
            <summary>
                Gets or sets a value indicating whether this instance can be cached for entire association.
            </summary>
            <value>
                <c>true</c> if this instance can be cached for entire association; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor">
            <summary>
                Required to force Spring to get values the way we want them to
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor"/> class.
            </summary>
            <param name="nameOfMember">The name of member.</param>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.Get(System.Object)">
            <summary>
                Gets the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.RequiresRefresh(System.Type)">
            <summary>
                Requireses the refresh.
            </summary>
            <param name="contextType">Type of the context.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.Set(System.Object,System.Object)">
            <summary>
                Sets the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.IsReadable">
            <summary>
                Gets a value indicating whether this instance is readable.
            </summary>
            <value>
                <c>true</c> if this instance is readable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.IsVolatile">
            <summary>
                Gets a value indicating whether this instance is volatile.
            </summary>
            <value>
                <c>true</c> if this instance is volatile; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.IsWriteable">
            <summary>
                Gets a value indicating whether this instance is writeable.
            </summary>
            <value>
                <c>true</c> if this instance is writeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.RequiresContext">
            <summary>
                Gets a value indicating whether [requires context].
            </summary>
            <value><c>true</c> if [requires context]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.TargetType">
            <summary>
                Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MemberSuiteObjectValueAccessor.MemberInfo">
            <summary>
                Gets the member info.
            </summary>
            <value>The member info.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorResponse.CustomerID">
            <summary>
            Needed for priority payment when captuing payment... 
            We'll need to include this ID when capturing payments..without this, the customer name don't appear in mxMerchant dashboard for transaction type of Sale
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PaymentProcessorResponse.TransactionReferenceNumber">
            <summary>
            Required for priority paymenst capture  call
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.PickListEntry">
            <summary>
                Represents acceptable values in a pick-list type field
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Types.PickListEntry._isActive">
            <summary>
                Whether or not this entry is active or hidden
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.PickListEntry.Create(System.String)">
            <summary>
                Creates the specified label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.PickListEntry.Create(System.String,System.String)">
            <summary>
                Creates an new picklist entry
            </summary>
            <param name="entryLabel">The entry label.</param>
            <param name="entryValue">Value to create</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.PickListEntry.ToString">
            <summary>
                Returns the string repressentation of this object
            </summary>
            <remarks>
                This method was basically added to aid in debuging so we can see
                e.g. PickListEntry:label = name
            </remarks>
            <returns></returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.IsActive">
            <summary>
                Whether or not this entry is active or hidden
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.Value">
            <summary>
                Value of the picklist item
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.Text">
            <summary>
                Label of the picklist item
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.IsDefault">
            <summary>
                Whether or not this is the default picklist entry item
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.InvertCascadingDependency">
            <summary>
                Whether or not to invert the cascading dependency - i.e.,
                the values specified in the cascading dependency are NOT valid for this
                entry
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.CascadingDropDownParentValues">
            <summary>
                Defines cascading drop downs
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.PickListEntry.WasFromLookupTable">
            <summary>
                Gets or sets a value indicating whether this custom field came from a lookup table
            </summary>
            <value><c>true</c> if [was from lookup table]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FinancialRecurrenceTemplate.InitialPercentage">
            <summary>
                Gets or sets the initial amount (percentage)
            </summary>
            <value>The initial amount.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FinancialRecurrenceTemplate.DayOfMonth">
            <summary>
                Gets or sets the day of month to recognize revenue
            </summary>
            <value>The day of month.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.FinancialRecurrenceTemplate.CustomEntries">
            <summary>
                Gets or sets the custom entries.
            </summary>
            <value>The custom entries.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.RecurrenceEntry.Date">
            <summary>
                Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.RecurrenceEntry.Percentage">
            <summary>
                Gets or sets the percentage.
            </summary>
            <value>The percentage.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.MembershipProductInfo.MembershipType">
            <summary>
                Gets or sets the type of the membership.
            </summary>
            <value>The type of the membership.</value>
            <remarks>For membership products only, this is set - otherwise, ignored</remarks>
        </member>
        <member name="T:MemberSuite.SDK.Types.RelativeDateTime">
            <summary>
                Encapsulates the idea of a "relative" date and time.
            </summary>
            <remarks>
                Used mostly by search logic. This class can represent, for instance, the concept of
                "5 minutess before right now", or "5 months after the beginning of the fiscal year. Before/After is
                accomplished using signs for the Units property.
            </remarks>
        </member>
        <member name="P:MemberSuite.SDK.Types.RelativeDateTime.SpecificDate">
            <summary>
                Gets or sets the specific date, if applicable
            </summary>
            <value>The specific date.</value>
        </member>
        <member name="T:MemberSuite.SDK.Types.SealedValue">
            <summary>
                Represents a value of a record that is locked
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.SearchSpecificationOverride.DefaultSelectedFields">
            <summary>
                Gets or sets the default selected fields.
            </summary>
            <value>The default selected fields.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.SearchSpecificationOverride.DefaultSortFields">
            <summary>
                Gets or sets the default sort fieds.
            </summary>
            <value>The default sort fieds.</value>
        </member>
        <member name="P:MemberSuite.SDK.Types.SearchSpecificationOverride.DefaultQuickSearchCriteria">
            <summary>
                These are the default columns that the quick search will act on
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.SearchSpecificationOverride.DefaultQuickSearchColumns">
            <summary>
                These are the default output columns for quick searches
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.SecurityLock">
            <summary>
                Represents a lock on a particular record, indicating which people have access
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Types.SerializableDictionary`2">
            PHASE THIS OUT!!!  A custom serializable dictionary IS NOT a standard implementations therefore a SOAP client has NO IDEA how to deserialize the XML into any object
            <summary>
                Serializable Dictionay class written by Paul Welter, copied from
                http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>This class was copied verbatim from Paul Welter's blog.</remarks>
        </member>
        <member name="T:MemberSuite.SDK.Types.ShortGuid">
            <summary>
                Represents a globally unique identifier (GUID) with a
                shorter string value. Sguid
            </summary>
            <remarks>
                Props to Dave Transom, who wrote this code. This code was copied directly from his public listing
                at http://www.singular.co.nz/blog/archive/2007/12/20/shortguid-a-shorter-and-url-friendly-guid-in-c-sharp.aspx.
            </remarks>
        </member>
        <member name="F:MemberSuite.SDK.Types.ShortGuid.Empty">
            <summary>
                A read-only instance of the ShortGuid class whose value
                is guaranteed to be all zeroes.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.ToString">
            <summary>
                Returns the base64 encoded guid as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this instance and a
                specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.GetHashCode">
            <summary>
                Returns the HashCode for underlying Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.NewGuid">
            <summary>
                Initialises a new instance of the ShortGuid class
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.#ctor(System.String)">
            <summary>
                Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">
                The encoded guid as a
                base64 string
            </param>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.#ctor(System.Guid)">
            <summary>
                Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.Encode(System.String)">
            <summary>
                Creates a new instance of a Guid using the string value,
                then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.Encode(System.Guid)">
            <summary>
                Encodes the given Guid as a base64 string that is 22
                characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.Decode(System.String)">
            <summary>
                Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.DecodeToString(System.String)">
            <summary>
                Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Equality(MemberSuite.SDK.Types.ShortGuid,MemberSuite.SDK.Types.ShortGuid)">
            <summary>
                Determines if both ShortGuids have the same underlying
                Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Inequality(MemberSuite.SDK.Types.ShortGuid,MemberSuite.SDK.Types.ShortGuid)">
            <summary>
                Determines if both ShortGuids do not have the
                same underlying Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Implicit(MemberSuite.SDK.Types.ShortGuid)~System.String">
            <summary>
                Implicitly converts the ShortGuid to it's string equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Implicit(MemberSuite.SDK.Types.ShortGuid)~System.Guid">
            <summary>
                Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Implicit(System.String)~MemberSuite.SDK.Types.ShortGuid">
            <summary>
                Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Types.ShortGuid.op_Implicit(System.Guid)~MemberSuite.SDK.Types.ShortGuid">
            <summary>
                Implicitly converts the Guid to a ShortGuid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="P:MemberSuite.SDK.Types.ShortGuid.Guid">
            <summary>
                Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Types.ShortGuid.Value">
            <summary>
                Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.AssemblyManager">
            <summary>
                Helper class for managing references to assemblies
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.GetProcessSymetricProvider">
            <summary>
                Creates a new instance of the RijndaelManaged provider using random key/IV values that exist during the life of the
                executing process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.GetCertificateByStoreAndSubject(System.String,System.String)">
            <summary>
                Retrieves a X509 Certificate from the Local Machine certificate store using the given store and subject. This
                method attempts to match on the certificate subject
                which is less unique than thumbprint but does not require settings to be reconfigured if the certificate is
                regenerated.
            </summary>
            <param name="subject">The subject of the certificate to retrieve (usually starts with CN=)</param>
            <param name="store">Optional store location of certificates</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.PublicKey)">
            <summary>
                Attempts to use the supplied public key to verify the supplied digital signature against the supplied data.  Will
                attempt to use RSA using SHA1 first then will attempt DSA.
            </summary>
            <param name="data">The data to use to verify the signature</param>
            <param name="signature">The signature to verify</param>
            <param name="key">The PublicKey to use to verify the data.</param>
            <returns>
                True if the supplied signature was generated using the private key pair of the supplied public key against the
                supplied data. Otherwise false.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
                Attempts to use the supplied certificate to verify the supplied digital signature against the supplied data.  Will
                verify with the public key always as it should have been signed with the private key.
            </summary>
            <param name="data">The data to use to verify the signature</param>
            <param name="signature">The signature to verify</param>
            <param name="certificate">The certificate containing the PublicKey to use to verify the data.</param>
            <returns>
                True if the supplied signature was generated using the private key pair of the supplied public key against the
                supplied data. Otherwise false.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
                Attempts to use the supplied public key to verify the supplied digital signature against the supplied data.  Will
                attempt to use RSA using SHA1 first then will attempt DSA.
            </summary>
            <param name="data">The data to use to verify the signature</param>
            <param name="signature">The signature to verify</param>
            <param name="key">The PublicKey to use to verify the data.</param>
            <returns>
                True if the supplied signature was generated using the private key pair of the supplied public key against the
                supplied data. Otherwise false.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
                Attempts to use the supplied public key to verify the supplied digital signature against the supplied data.  Will
                attempt to use RSA using SHA1 first then will attempt DSA.
            </summary>
            <param name="data">The data to use to verify the signature</param>
            <param name="signature">The signature to verify</param>
            <param name="signer">The signer to use to verify the data.</param>
            <returns>
                True if the supplied signature was generated using the private key pair of the supplied public key against the
                supplied data. Otherwise false.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.String,System.String)">
            <summary>
                Retrieves a certificate using the supplied store and subject and creates a unique signature using the data using
                the certificate private key.
            </summary>
            <param name="data">The data to sign</param>
            <param name="certificateSubject">The subject of the certificate containing the private key to use to sign the data</param>
            <param name="certificateStore">
                Optional store location of the certificate containing the private key to use to sign the
                data
            </param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
                Creates a unique signature using the supplied data and private key of the supplied certificate.
            </summary>
            <param name="data">The data to sign</param>
            <param name="certificate">The certificate containing the private key to use to sign the data</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.String)">
            <summary>
                Creates a unique signature using the supplied data and RSA key information in the supplied file path.
            </summary>
            <param name="data">The data to sign</param>
            <param name="path">Path to a unicode encoded text file containing the RSA key XML string</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.IO.Stream,System.Text.Encoding)">
            <summary>
                Creates a unique signature using the supplied data and RSA key information in the supplied stream.
            </summary>
            <param name="data">The data to sign</param>
            <param name="xmlKeyStream">A stream containing the RSA key XML string</param>
            <param name="encoding">Encoding to use to read the stream</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.IO.Stream)">
            <summary>
                Creates a unique signature using the supplied data and RSA key information in the supplied stream.
            </summary>
            <param name="data">The data to sign</param>
            <param name="xmlKeyStream">A stream containing the RSA key XML string</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
                Creates a unique signature using the supplied data and RSA key information in the supplied file path.
            </summary>
            <param name="data">The data to sign</param>
            <param name="path">Path to a text file containing the RSA key XML string</param>
            <param name="encoding">The encoding type for the file contining the RSA key XML string</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.Sign(System.Byte[],System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
                Creates a unique signature using the supplied data using the provided key.
            </summary>
            <param name="data">The data to sign</param>
            <param name="key">The RSACryptoServiceProvider or DSACryptoServiceProvider to use to verify the data.</param>
            <returns>The unique byte array signature of the data/key combination.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.GenerateProcessSymmetric">
            <summary>
                Generates and encrypts a random symmetric key and IV that are valid for the life of the process.  Generally there
                is no need to call this
                method because values are randomly generated on first use.  However this method can be used to generate a new key
                and IV pair during the life
                of the process.
                **WARNING** executing this method will render all data encrypted using the process symmetric key unretrievable.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.EncryptDataWithProcessSymmetric(System.Byte[])">
            <summary>
                Encrypts the supplied data using the Rijndael algorythm and a random key/IV that only exists during the lifespan of
                the executing process.
                **WARNING** restarting the executing process or calling GenerateProcessSymmetric() will render all data encrypted
                using the method unretrievable.
            </summary>
            <param name="bytes">The data to encrypt</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.CryptoManager.DecryptDataWithProcessSymmetric(System.Byte[])">
            <summary>
                Decrypts data previous encrypted using the Rijndael algorythm and the random key/IV generated during the lifespan
                of the executing process using the EncryptDataWithProcessSymmetric method.
                If the executing process has been restarted or GenerateProcessSymmetric() has been called since the data was
                encrypted this method will fail.
            </summary>
            <param name="bytes">The data previously encrypted using EncryptDataWithProcessSymmetric</param>
            <returns>The decrypted data</returns>
        </member>
        <member name="F:MemberSuite.SDK.Utilities.CryptoManager.EncryptedProcessSymmetricKey">
            <summary>
                The encrypted Rijndael key to use during the life of the executing process for process scoped encryption.
                This should always be stored in a SecureString or other encrypted type to minimize the time the clear-text key
                exists in memory.
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Utilities.CryptoManager.EncryptedProcessSymmetricIV">
            <summary>
                The encrypted Rijndael Initialization Vector (IV) to use during the life of the executing process for process
                scoped encryption.
                This should always be stored in a SecureString or other encrypted type to minimize the time the clear-text IV
                exists in memory.
            </summary>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.Quarter">
            <summary>
                Common DateTime Methods.
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.DateUtils.GetMonthDiff(System.DateTime,System.DateTime)">
            <summary>
                Gets the number of months in between two dates, irrespective of the day
            </summary>
            <param name="firstDate">The first date.</param>
            <param name="secondDate">The second date.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.ReaderWriterLockManager">
            <summary>
                Wrapper class for syncronized access
            </summary>
            <remarks>Copied from http://thevalerios.net/matt/2008/09/using-readerwriterlockslim/</remarks>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.ReaderWriterLockManager.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
                Initializes a new instance of the <see cref="T:MemberSuite.SDK.Utilities.ReaderWriterLockManager"/> class.
            </summary>
            <param name="ReaderWriterLock">The reader writer lock.</param>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.RunOnce">
            <summary>
                When wrapped in a using class, this will ensure that a piece of code is only run once
            </summary>
        </member>
        <member name="F:MemberSuite.SDK.Utilities.RunOnce._signal">
            <summary>
                This event makes sure that any other callers wait until the first
                process is done.
            </summary>
        </member>
        <member name="P:MemberSuite.SDK.Utilities.RunOnce.ShouldRun">
            <summary>
                Gets a value indicating whether the code should run
            </summary>
            <value><c>true</c> if [should run]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.StringUtil">
            <summary>
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.StringUtil.IsNumeric(System.String)">
            <summary>
                Determines whether the specified s is numeric.
            </summary>
            <param name="s">The s.</param>
            <returns>
                <c>true</c> if the specified s is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.StringUtil.SafeFormat(System.String,System.Object[])">
            <summary>
                Formats the string, guaranteeing that no exception occurs
            </summary>
            <param name="msg">The MSG.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.StringUtil.TrimStringArray(System.String[])">
            <summary>
                Trims the string array.
            </summary>
            <param name="arrayToTrim">The array to trim.</param>
            <returns></returns>
        </member>
        <member name="T:MemberSuite.SDK.Utilities.Xml">
            <summary>
                Class used for Xml serialization/utilieis
            </summary>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.SerializeWithDataContractSerializer(System.Object)">
            <summary>
                Serializes an object with data contract serializer.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.DeserializeWithDataContractSerializer``1(System.String)">
            <summary>
                Serializes an object with data contract serializer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Serialize(System.Object)">
            <summary>
                Serializes the specified object to serialize.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">objectToSerialize</exception>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Deserialize``1(System.Xml.XmlNode)">
            <summary>
                Deserializes the specified document to serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentToSerialize">The document to serialize.</param>
            <returns>``0.</returns>
            <exception cref="T:System.ArgumentNullException">documentToSerialize</exception>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Deserialize``1(System.Xml.XmlReader)">
            <summary>
                Deserializes the specified document to serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <returns>``0.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Clone``1(``0)">
            <summary>
                Clones the specified obj to copy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objToCopy">The obj to copy.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Deserialize``1(System.String)">
            <summary>
                Deserializes the specified document to serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <returns>``0.</returns>
            <exception cref="T:System.ArgumentNullException">xml</exception>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.DeserializeWithNodeReader``1(System.Xml.XmlNode)">
            <summary>
                Generic method for deserializing an object from a XmlDocument
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">XmlDocument containing the Xml to deserialize.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.Deserialize``1(System.Xml.Linq.XContainer)">
            <summary>
                Deserializes the specified document to serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentToSerialize">The document to serialize.</param>
            <returns>``0.</returns>
            <exception cref="T:System.ArgumentNullException">documentToSerialize</exception>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.WriteShallowNode(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
                Writes the shallow node.
            </summary>
            <param name="reader">The reader.</param>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">
                reader
                or
                writer
            </exception>
            <remarks>
                This is a direct COPY OF CODE from Mark Fussells Weblog
                http://blogs.msdn.com/mfussell/archive/2005/02/12/371546.aspx.
            </remarks>
        </member>
        <member name="M:MemberSuite.SDK.Utilities.Xml.ReadToNextElement(System.Xml.XmlReader)">
            <summary>
                Reads to next element.
            </summary>
            <param name="xr">The xr.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
            <exception cref="T:System.ArgumentNullException">xr</exception>
        </member>
    </members>
</doc>
